0 there
1 may
2 be
3 no
4 easy
5 way
6 to
7 enumerate
8 the
9 keys
10 that
11 are
12 present
13 in
14 the
15 table
16 at
17 any
18 given
19 moment
20 Although
21 the
22 average
23 cost
24 per
25 operation
26 is
27 constant
28 and
29 fairly
30 small
31 the
32 cost
33 of
34 a
35 single
36 operation
37 may
38 be
39 quite
40 high
41 In
42 particular
43 if
44 the
45 hash
46 table
47 uses
48 dynamic
49 resizing
50 an
51 insertion
52 or
53 deletion
54 operation
55 may
56 occasionally
57 take
58 time
59 proportional
60 to
61 the
62 number
63 of
64 entries
65 This
66 may
67 be
68 a
69 serious
70 drawback
71 in
72 real
73 time
74 or
75 interactive
76 applications
77 Hash
78 tables
79 in
80 general
81 exhibit
82 poor
83 locality
84 of
85 reference
86 that
87 is
88 the
89 data
90 to
91 be
92 accessed
93 is
94 distributed
95 seemingly
96 at
97 random
98 in
99 memory
100 Because
101 hash
102 tables
103 cause
104 access
105 patterns
106 that
107 jump
108 around
109 this
110 can
111 trigger
112 microprocessor
113 cache
114 misses
115 that
116 cause
117 long
118 delays
119 Compact
120 data
121 structures
122 such
123 as
124 arrays
125 searched
126 with
127 linear
128 search
129 may
130 be
131 faster
132 if
133 the
134 table
135 is
136 relatively
137 small
138 and
139 keys
140 are
141 compact
142 The
143 optimal
144 performance
145 point
146 varies
147 from
148 system
149 to
150 system
151 Hash
152 tables
153 become
154 quite
155 inefficient
156 when
157 there
158 are
159 many
160 collisions
161 While
162 extremely
163 uneven
164 hash
165 distributions
166 are
167 extremely
168 unlikely
169 to
170 arise
171 by
172 chance
173 a
174 malicious
175 adversary
176 with
177 knowledge
178 of
179 the
180 hash
181 function
182 may
183 be
184 able
185 to
186 supply
187 information
188 to
189 a
190 hash
191 that
192 creates
193 worst
194 case
195 behavior
196 by
197 causing
198 excessive
199 collisions
200 resulting
201 in
202 very
203 poor
204 performance
205 eg
206 a
207 denial
208 of
209 service
210 attack22
211 In
212 critical
213 applications
214 universal
215 hashing
216 can
217 be
218 used
219 a
220 data
221 structure
222 with
223 better
224 worst
225 case
226 guarantees
227 may
228 be
229 preferable23
230 Uses
231 Question
232 book
233 newsvg
234 This
235 section
236 does
237 not
238 cite
239 any
240 references
241 or
242 sources
243 Please
244 help
245 improve
246 this
247 section
248 by
249 adding
250 citations
251 to
252 reliable
253 sources
254 Unsourced
255 material
256 may
257 be
258 challenged
259 and
260 removed
261 July
262 2013
263 Associative
264 arrays
265 Hash
266 tables
267 are
268 commonly
269 used
270 to
271 implement
272 many
273 types
274 of
275 in
276 memory
277 tables
278 They
279 are
280 used
281 to
282 implement
283 associative
284 arrays
285 arrays
286 whose
287 indices
288 are
289 arbitrary
290 strings
291 or
292 other
293 complicated
294 objects
295 especially
296 in
297 interpreted
298 programming
299 languages
300 like
301 Ruby
302 Python
303 and
304 PHP
305 When
306 storing
307 a
308 new
309 item
310 into
311 a
312 multimap
313 and
314 a
315 hash
316 collision
317 occurs
318 the
319 multimap
320 unconditionally
321 stores
322 both
323 items
324 When
325 storing
326 a
327 new
328 item
329 into
330 a
331 typical
332 associative
333 array
334 and
335 a
336 hash
337 collision
338 occurs
339 but
340 the
341 actual
342 keys
343 themselves
344 are
345 different
346 the
347 associative
348 array
349 likewise
350 stores
351 both
352 items
353 However
354 if
355 the
356 key
357 of
358 the
359 new
360 item
361 exactly
362 matches
363 the
364 key
365 of
366 an
367 old
368 item
369 the
370 associative
371 array
372 typically
373 erases
374 the
375 old
376 item
377 and
378 overwrites
379 it
380 with
381 the
382 new
383 item
384 so
385 every
386 item
387 in
388 the
389 table
390 has
391 a
392 unique
393 key
394 Database
395 indexing
396 Hash
397 tables
398 may
399 also
400 be
401 used
402 as
403 disk
404 based
405 data
406 structures
407 and
408 database
409 indices
410 such
411 as
412 in
413 dbm
414 although
415 B
416 trees
417 are
418 more
419 popular
420 in
421 these
422 applications
423 Caches
424 Hash
425 tables
426 can
427 be
428 used
429 to
430 implement
431 caches
432 auxiliary
433 data
434 tables
435 that
436 are
437 used
438 to
439 speed
440 up
441 the
442 access
443 to
444 data
445 that
446 is
447 primarily
448 stored
449 in
450 slower
451 media
452 In
453 this
454 application
455 hash
456 collisions
457 can
458 be
459 handled
460 by
461 discarding
462 one
463 of
464 the
465 two
466 colliding
467 entries
468 usually
469 erasing
470 the
471 old
472 item
473 that
474 is
475 currently
476 stored
477 in
478 the
479 table
480 and
481 overwriting
482 it
483 with
484 the
485 new
486 item
487 so
488 every
489 item
490 in
491 the
492 table
493 has
494 a
495 unique
496 hash
497 value
498 Sets
499 Besides
500 recovering
501 the
502 entry
503 that
504 has
505 a
506 given
507 key
508 many
509 hash
510 table
511 implementations
512 can
513 also
514 tell
515 whether
516 such
517 an
518 entry
519 exists
520 or
521 not
522 Those
523 structures
524 can
525 therefore
526 be
527 used
528 to
529 implement
530 a
531 set
532 data
533 structure
534 which
535 merely
536 records
537 whether
538 a
539 given
540 key
541 belongs
542 to
543 a
544 specified
545 set
546 of
547 keys
548 In
549 this
550 case
551 the
552 structure
553 can
554 be
555 simplified
556 by
557 eliminating
558 all
559 parts
560 that
561 have
562 to
563 do
564 with
565 the
566 entry
567 values
568 Hashing
569 can
570 be
571 used
572 to
573 implement
574 both
575 static
576 and
577 dynamic
578 sets
579 Object
580 representation
581 Several
582 dynamic
583 languages
584 such
585 as
586 Perl
587 Python
588 JavaScript
589 and
590 Ruby
591 use
592 hash
593 tables
594 to
595 implement
596 objects
597 In
598 this
599 representation
600 the
601 keys
602 are
603 the
604 names
605 of
606 the
607 members
608 and
609 methods
610 of
611 the
612 object
613 and
614 the
615 values
616 are
617 pointers
618 to
619 the
620 corresponding
621 member
622 or
623 method
624 Unique
625 data
626 representation
627 Hash
628 tables
629 can
630 be
631 used
632 by
633 some
634 programs
635 to
636 avoid
637 creating
638 multiple
639 character
640 strings
641 with
642 the
643 same
644 contents
645 For
646 that
647 purpose
648 all
649 strings
650 in
651 use
652 by
653 the
654 program
655 are
656 stored
657 in
658 a
659 single
660 string
661 pool
662 implemented
663 as
664 a
665 hash
666 table
667 which
668 is
669 checked
670 whenever
671 a
672 new
673 string
674 has
675 to
676 be
677 created
678 This
679 technique
680 was
681 introduced
682 in
683 Lisp
684 interpreters
685 under
686 the
687 name
688 hash
689 consing
690 and
691 can
692 be
693 used
694 with
695 many
696 other
697 kinds
698 of
699 data
700 expression
701 trees
702 in
703 a
704 symbolic
705 algebra
706 system
707 records
708 in
709 a
710 database
711 files
712 in
713 a
714 file
715 system
716 binary
717 decision
718 diagrams
719 etc
720 String
721 interning
722 Main
723 article
724 String
725 interning
726 Implementations
727 In
728 programming
729 languages
730 Many
731 programming
732 languages
733 provide
734 hash
735 table
736 functionality
737 either
738 as
739 built
740 in
741 associative
742 arrays
743 or
744 as
745 standard
746 library
747 modules
748 In
749 C
750 11
751 for
752 example
753 the
754 unordered
755 map
756 class
757 provides
758 hash
759 tables
760 for
761 keys
762 and
763 values
764 of
765 arbitrary
766 type
767 In
768 PHP
769 5
770 the
771 Zend
772 2
773 engine
774 uses
775 one
776 of
777 the
778 hash
779 functions
780 from
781 Daniel
782 J
783 Bernstein
784 to
785 generate
786 the
787 hash
788 values
789 used
790 in
791 managing
792 the
793 mappings
794 of
795 data
796 pointers
797 stored
798 in
799 a
800 hash
801 table
802 In
803 the
804 PHP
805 source
806 code
807 it
808 is
809 labelled
810 as
811 DJBX33A
812 Daniel
813 J
814 Bernstein
815 Times
816 33
817 with
818 Addition
819 Pythons
820 built
821 in
822 hash
823 table
824 implementation
825 in
826 the
827 form
828 of
829 the
830 dict
831 type
832 as
833 well
834 as
835 Perls
836 hash
837 type
838 are
839 used
840 internally
841 to
842 implement
843 namespaces
844 and
845 therefore
846 need
847 to
848 pay
849 more
850 attention
851 to
852 security
853 ie
854 collision
855 attacks
856 In
857 the
858 NET
859 Framework
860 support
861 for
862 hash
863 tables
864 is
865 provided
866 via
867 the
868 non
869 generic
870 Hashtable
871 and
872 generic
873 Dictionary
874 classes
875 which
876 store
877 key
878 value
879 pairs
880 and
881 the
882 generic
883 HashSet
884 class
885 which
886 stores
887 only
888 values
889 Independent
890 packages
891 SparseHash
892 formerly
893 Google
894 SparseHash
895 An
896 extremely
897 memory
898 efficient
899 hash
900 map
901 implementation
902 with
903 only
904 2
905 bits
906 entry
907 of
908 overhead
909 The
910 SparseHash
911 library
912 has
913 several
914 C
915 hash
916 map
917 implementations
918 with
919 different
920 performance
921 characteristics
922 including
923 one
924 that
925 optimizes
926 for
927 memory
928 use
929 and
930 another
931 that
932 optimizes
933 for
934 speed
935 Sunrise
936 DD
937 An
938 open
939 source
940 C
941 library
942 for
943 hash
944 table
945 storage
946 of
947 arbitrary
948 data
949 objects
950 with
951 lock
952 free
953 lookups
954 built
955 in
956 reference
957 counting
958 and
959 guaranteed
960 order
961 iteration
962 The
963 library
964 can
965 participate
966 in
967 external
968 reference
969 counting
970 systems
971 or
972 use
973 its
974 own
975 built
976 in
977 reference
978 counting
979 It
980 comes
981 with
982 a
983 variety
984 of
985 hash
986 functions
987 and
988 allows
989 the
990 use
991 of
992 runtime
993 supplied
994 hash
995 functions
996 via
997 callback
998 mechanism
999 Source
1000 code
1001 is
1002 well
1003 documented
1004 uthash
1005 This
1006 is
1007 an
1008 easy
1009 to
1010 use
1011 hash
1012 table
1013 for
1014 C
1015 structures
1016 History
1017 The
1018 idea
1019 of
1020 hashing
1021 arose
1022 independently
1023 in
1024 different
1025 places
1026 In
1027 January
1028 1953
1029 H
1030 P
1031 Luhn
1032 wrote
1033 an
1034 internal
1035 IBM
1036 memorandum
1037 that
1038 used
1039 hashing
1040 with
1041 chaining24
1042 G
1043 N
1044 Amdahl
1045 E
1046 M
1047 Boehme
1048 N
1049 Rochester
1050 and
1051 Arthur
1052 Samuel
1053 implemented
1054 a
1055 program
1056 using
1057 hashing
1058 at
1059 about
1060 the
1061 same
1062 time
1063 Open
1064 addressing
1065 with
1066 linear
1067 probing
1068 relatively
1069 prime
1070 stepping
1071 is
1072 cr
1073 ed
1074 to
1075 Amdahl
1076 but
1077 Ershov
1078 in
1079 Russia
1080 had
1081 the
1082 same
1083 idea24
1084 See
1085 also
1086 Rabin
1087 Karp
1088 string
1089 search
1090 algorithm
1091 Stable
1092 hashing
1093 Consistent
1094 hashing
1095 Extendible
1096 hashing
1097 Lazy
1098 deletion
1099 Pearson
1100 hashing
1101 Related
1102 data
1103 structures
1104 There
1105 are
1106 several
1107 data
1108 structures
1109 that
1110 use
1111 hash
1112 functions
1113 but
1114 cannot
1115 be
1116 considered
1117 special
1118 cases
1119 of
1120 hash
1121 tables
1122 Bloom
1123 filter
1124 memory
1125 efficient
1126 data
1127 structure
1128 designed
1129 for
1130 constant
1131 time
1132 approximate
1133 lookups
1134 uses
1135 hash
1136 functions
1137 and
1138 can
1139 be
1140 seen
1141 as
1142 an
1143 approximate
1144 hash
1145 table
1146 Distributed
1147 hash
1148 table
1149 DHT
1150 a
1151 resilient
1152 dynamic
1153 table
1154 spread
1155 over
1156 several
1157 nodes
1158 of
1159 a
1160 network
1161 Hash
1162 array
1163 mapped
1164 trie
1165 a
1166 trie
1167 structure
1168 similar
1169 to
1170 the
1171 array
1172 mapped
1173 trie
1174 but
1175 where
1176 each
1177 key
1178 is
1179 hashed
1180 first
1181 A
1182 red
1183 black
1184 tree
1185 is
1186 a
1187 data
1188 structure
1189 which
1190 is
1191 a
1192 type
1193 of
1194 self
1195 balancing
1196 binary
1197 search
1198 tree
1199 Balance
1200 is
1201 preserved
1202 by
1203 painting
1204 each
1205 node
1206 of
1207 the
1208 tree
1209 with
1210 one
1211 of
1212 two
1213 colors
1214 typically
1215 called
1216 red
1217 and
1218 black
1219 in
1220 a
1221 way
1222 that
1223 satisfies
1224 certain
1225 properties
1226 which
1227 collectively
1228 constrain
1229 how
1230 unbalanced
1231 the
1232 tree
1233 can
1234 become
1235 in
1236 the
1237 worst
1238 case
1239 When
1240 the
1241 tree
1242 is
1243 modified
1244 the
1245 new
1246 tree
1247 is
1248 subsequently
1249 rearranged
1250 and
1251 repainted
1252 to
1253 restore
1254 the
1255 coloring
1256 properties
1257 The
1258 properties
1259 are
1260 designed
1261 in
1262 such
1263 a
1264 way
1265 that
1266 this
1267 rearranging
1268 and
1269 recoloring
1270 can
1271 be
1272 performed
1273 efficiently
1274 The
1275 balancing
1276 of
1277 the
1278 tree
1279 is
1280 not
1281 perfect
1282 but
1283 it
1284 is
1285 good
1286 enough
1287 to
1288 allow
1289 it
1290 to
1291 guarantee
1292 searching
1293 in
1294 O
1295 log
1296 n
1297 time
1298 where
1299 n
1300 is
1301 the
1302 total
1303 number
1304 of
1305 elements
1306 in
1307 the
1308 tree
1309 The
1310 insertion
1311 and
1312 deletion
1313 operations
1314 along
1315 with
1316 the
1317 tree
1318 rearrangement
1319 and
1320 recoloring
1321 are
1322 also
1323 performed
1324 in
1325 O
1326 log
1327 n
1328 time
1329 1
1330 Tracking
1331 the
1332 color
1333 of
1334 each
1335 node
1336 requires
1337 only
1338 1
1339 bit
1340 of
1341 information
1342 per
1343 node
1344 because
1345 there
1346 are
1347 only
1348 two
1349 colors
1350 The
1351 tree
1352 does
1353 not
1354 contain
1355 any
1356 other
1357 data
1358 specific
1359 to
1360 its
1361 being
1362 a
1363 red
1364 black
1365 tree
1366 so
1367 its
1368 memory
1369 footprint
1370 is
1371 almost
1372 identical
1373 to
1374 a
1375 classic
1376 uncolored
1377 binary
1378 search
1379 tree
1380 In
1381 many
1382 cases
1383 the
1384 additional
1385 bit
1386 of
1387 information
1388 can
1389 be
1390 stored
1391 at
1392 no
1393 additional
1394 memory
1395 cost
1396 The
1397 original
1398 data
1399 structure
1400 was
1401 invented
1402 in
1403 1972
1404 by
1405 Rudolf
1406 Bayer
1407 2
1408 and
1409 named
1410 symmetric
1411 binary
1412 B
1413 tree
1414 but
1415 acquired
1416 its
1417 modern
1418 name
1419 in
1420 a
1421 paper
1422 in
1423 1978
1424 by
1425 Leonidas
1426 J
1427 Guibas
1428 and
1429 Robert
1430 Sedgewick
1431 entitled
1432 A
1433 Dichromatic
1434 Framework
1435 for
1436 Balanced
1437 Trees
1438 3
1439 The
1440 color
1441 red
1442 was
1443 chosen
1444 because
1445 it
1446 was
1447 the
1448 best
1449 looking
1450 color
1451 produced
1452 by
1453 the
1454 color
1455 laser
1456 printer
1457 available
1458 to
1459 the
1460 authors
1461 while
1462 working
1463 at
1464 Xerox
1465 PARC
1466 4
1467 Terminology
1468 A
1469 red
1470 black
1471 tree
1472 is
1473 a
1474 special
1475 type
1476 of
1477 binary
1478 tree
1479 used
1480 in
1481 computer
1482 science
1483 to
1484 organize
1485 pieces
1486 of
1487 comparable
1488 data
1489 such
1490 as
1491 text
1492 fragments
1493 or
1494 numbers
1495 The
1496 leaf
1497 nodes
1498 of
1499 red
1500 black
1501 trees
1502 do
1503 not
1504 contain
1505 data
1506 These
1507 leaves
1508 need
1509 not
1510 be
1511 explicit
1512 in
1513 computer
1514 memory—a
1515 null
1516 child
1517 pointer
1518 can
1519 encode
1520 the
1521 fact
1522 that
1523 this
1524 child
1525 is
1526 a
1527 leaf—but
1528 it
1529 simplifies
1530 some
1531 algorithms
1532 for
1533 operating
1534 on
1535 red
1536 black
1537 trees
1538 if
1539 the
1540 leaves
1541 really
1542 are
1543 explicit
1544 nodes
1545 To
1546 save
1547 memory
1548 sometimes
1549 a
1550 single
1551 sentinel
1552 node
1553 performs
1554 the
1555 role
1556 of
1557 all
1558 leaf
1559 nodes
1560 all
1561 references
1562 from
1563 internal
1564 nodes
1565 to
1566 leaf
1567 nodes
1568 then
1569 point
1570 to
1571 the
1572 sentinel
1573 node
1574 Red
1575 black
1576 trees
1577 like
1578 all
1579 binary
1580 search
1581 trees
1582 allow
1583 efficient
1584 in
1585 order
1586 traversal
1587 that
1588 is
1589 in
1590 the
1591 order
1592 Left
1593 Root
1594 Right
1595 of
1596 their
1597 elements
1598 The
1599 search
1600 time
1601 results
1602 from
1603 the
1604 traversal
1605 from
1606 root
1607 to
1608 leaf
1609 and
1610 therefore
1611 a
1612 balanced
1613 tree
1614 of
1615 n
1616 nodes
1617 having
1618 the
1619 least
1620 possible
1621 tree
1622 height
1623 results
1624 in
1625 O
1626 log
1627 n
1628 search
1629 time
1630 Properties
1631 Diagram
1632 of
1633 binary
1634 tree
1635 The
1636 black
1637 root
1638 node
1639 has
1640 two
1641 red
1642 children
1643 and
1644 four
1645 black
1646 grandchildren
1647 The
1648 child
1649 nodes
1650 of
1651 the
1652 grandchildren
1653 are
1654 black
1655 nil
1656 pointers
1657 or
1658 red
1659 nodes
1660 with
1661 black
1662 nil
1663 pointers
1664 An
1665 example
1666 of
1667 a
1668 red
1669 black
1670 tree
1671 In
1672 addition
1673 to
1674 the
1675 requirements
1676 imposed
1677 on
1678 a
1679 binary
1680 search
1681 tree
1682 the
1683 following
1684 must
1685 be
1686 satisfied
1687 by
1688 a
1689 red
1690 black
1691 tree
1692 5
1693 A
1694 node
1695 is
1696 either
1697 red
1698 or
1699 black
1700 The
1701 root
1702 is
1703 black
1704 This
1705 rule
1706 is
1707 sometimes
1708 omitted
1709 Since
1710 the
1711 root
1712 can
1713 always
1714 be
1715 changed
1716 from
1717 red
1718 to
1719 black
1720 but
1721 not
1722 necessarily
1723 vice
1724 versa
1725 this
1726 rule
1727 has
1728 little
1729 effect
1730 on
1731 analysis
1732 All
1733 leaves
1734 NIL
1735 are
1736 black
1737 All
1738 leaves
1739 are
1740 same
1741 color
1742 as
1743 the
1744 root
1745 Every
1746 red
1747 node
1748 must
1749 have
1750 two
1751 black
1752 child
1753 nodes
1754 Every
1755 path
1756 from
1757 a
1758 given
1759 node
1760 to
1761 any
1762 of
1763 its
1764 descendant
1765 leaves
1766 contains
1767 the
1768 same
1769 number
1770 of
1771 black
1772 nodes
1773 These
1774 constraints
1775 enforce
1776 a
1777 critical
1778 property
1779 of
1780 red
1781 black
1782 trees
1783 that
1784 the
1785 path
1786 from
1787 the
1788 root
1789 to
1790 the
1791 furthest
1792 leaf
1793 is
1794 no
1795 more
1796 than
1797 twice
1798 as
1799 long
1800 as
1801 the
1802 path
1803 from
1804 the
1805 root
1806 to
1807 the
1808 nearest
1809 leaf
1810 The
1811 result
1812 is
1813 that
1814 the
1815 tree
1816 is
1817 roughly
1818 height
1819 balanced
1820 Since
1821 operations
1822 such
1823 as
1824 inserting
1825 deleting
1826 and
1827 finding
1828 values
1829 require
1830 worst
1831 case
1832 time
1833 proportional
1834 to
1835 the
1836 height
1837 of
1838 the
1839 tree
1840 this
1841 theoretical
1842 upper
1843 bound
1844 on
1845 the
1846 height
1847 allows
1848 red
1849 black
1850 trees
1851 to
1852 be
1853 efficient
1854 in
1855 the
1856 worst
1857 case
1858 unlike
1859 ordinary
1860 binary
1861 search
1862 trees
1863 To
1864 see
1865 why
1866 this
1867 is
1868 guaranteed
1869 it
1870 suffices
1871 to
1872 consider
1873 the
1874 effect
1875 of
1876 properties
1877 4
1878 and
1879 5
1880 together
1881 For
1882 a
1883 red
1884 black
1885 tree
1886 T
1887 let
1888 B
1889 be
1890 the
1891 number
1892 of
1893 black
1894 nodes
1895 in
1896 property
1897 5
1898 Let
1899 the
1900 shortest
1901 possible
1902 path
1903 from
1904 the
1905 root
1906 of
1907 T
1908 to
1909 any
1910 leaf
1911 consist
1912 of
1913 B
1914 black
1915 nodes
1916 Longer
1917 possible
1918 paths
1919 may
1920 be
1921 constructed
1922 by
1923 inserting
1924 red
1925 nodes
1926 However
1927 property
1928 4
1929 makes
1930 it
1931 impossible
1932 to
1933 insert
1934 more
1935 than
1936 one
1937 consecutive
1938 red
1939 node
1940 Therefore
1941 the
1942 longest
1943 possible
1944 path
1945 consists
1946 of
1947 2B
1948 nodes
1949 alternating
1950 black
1951 and
1952 red
1953 The
1954 shortest
1955 possible
1956 path
1957 has
1958 all
1959 black
1960 nodes
1961 and
1962 the
1963 longest
1964 possible
1965 path
1966 alternates
1967 between
1968 red
1969 and
1970 black
1971 nodes
1972 Since
1973 all
1974 maximal
1975 paths
1976 have
1977 the
1978 same
1979 number
1980 of
1981 black
1982 nodes
1983 by
1984 property
1985 5
1986 this
1987 shows
1988 that
1989 no
1990 path
1991 is
1992 more
1993 than
1994 twice
1995 as
1996 long
1997 as
1998 any
1999 other
2000 path
2001 Analogy
2002 to
2003 B
2004 trees
2005 of
2006 order
2007 4
2008 The
2009 same
2010 red
2011 black
2012 tree
2013 as
2014 in
2015 the
2016 example
2017 above
2018 seen
2019 as
2020 a
2021 B
2022 tree
2023 A
2024 red
2025 black
2026 tree
2027 is
2028 similar
2029 in
2030 structure
2031 to
2032 a
2033 B
2034 tree
2035 of
2036 order
2037 note
2038 1
2039 4
2040 where
2041 each
2042 node
2043 can
2044 contain
2045 between
2046 1
2047 and
2048 3
2049 values
2050 and
2051 accordingly
2052 between
2053 2
2054 and
2055 4
2056 child
2057 pointers
2058 In
2059 such
2060 a
2061 B
2062 tree
2063 each
2064 node
2065 will
2066 contain
2067 only
2068 one
2069 value
2070 matching
2071 the
2072 value
2073 in
2074 a
2075 black
2076 node
2077 of
2078 the
2079 red
2080 black
2081 tree
2082 with
2083 an
2084 optional
2085 value
2086 before
2087 and
2088 or
2089 after
2090 it
2091 in
2092 the
2093 same
2094 node
2095 both
2096 matching
2097 an
2098 equivalent
2099 red
2100 node
2101 of
2102 the
2103 red
2104 black
2105 tree
2106 One
2107 way
2108 to
2109 see
2110 this
2111 equivalence
2112 is
2113 to
2114 move
2115 up
2116 the
2117 red
2118 nodes
2119 in
2120 a
2121 graphical
2122 representation
2123 of
2124 the
2125 red
2126 black
2127 tree
2128 so
2129 that
2130 they
2131 align
2132 horizontally
2133 with
2134 their
2135 parent
2136 black
2137 node
2138 by
2139 creating
2140 together
2141 a
2142 horizontal
2143 cluster
2144 In
2145 the
2146 B
2147 tree
2148 or
2149 in
2150 the
2151 modified
2152 graphical
2153 representation
2154 of
2155 the
2156 red
2157 black
2158 tree
2159 all
2160 leaf
2161 nodes
2162 are
2163 at
2164 the
2165 same
2166 depth
2167 The
2168 red
2169 black
2170 tree
2171 is
2172 then
2173 structurally
2174 equivalent
2175 to
2176 a
2177 B
2178 tree
2179 of
2180 order
2181 4
2182 with
2183 a
2184 minimum
2185 fill
2186 factor
2187 of
2188 33
2189 of
2190 values
2191 per
2192 cluster
2193 with
2194 a
2195 maximum
2196 capacity
2197 of
2198 3
2199 values
2200 This
2201 B
2202 tree
2203 type
2204 is
2205 still
2206 more
2207 general
2208 than
2209 a
2210 red
2211 black
2212 tree
2213 though
2214 as
2215 it
2216 allows
2217 ambiguity
2218 in
2219 a
2220 red
2221 black
2222 tree
2223 conversion—multiple
2224 red
2225 black
2226 trees
2227 can
2228 be
2229 produced
2230 from
2231 an
2232 equivalent
2233 B
2234 tree
2235 of
2236 order
2237 4
2238 If
2239 a
2240 B
2241 tree
2242 cluster
2243 contains
2244 only
2245 1
2246 value
2247 it
2248 is
2249 the
2250 minimum
2251 black
2252 and
2253 has
2254 two
2255 child
2256 pointers
2257 If
2258 a
2259 cluster
2260 contains
2261 3
2262 values
2263 then
2264 the
2265 central
2266 value
2267 will
2268 be
2269 black
2270 and
2271 each
2272 value
2273 stored
2274 on
2275 its
2276 sides
2277 will
2278 be
2279 red
2280 If
2281 the
2282 cluster
2283 contains
2284 two
2285 values
2286 however
2287 either
2288 one
2289 can
2290 become
2291 the
2292 black
2293 node
2294 in
2295 the
2296 red
2297 black
2298 tree
2299 and
2300 the
2301 other
2302 one
2303 will
2304 be
2305 red
2306 So
2307 the
2308 order
2309 4
2310 B
2311 tree
2312 does
2313 not
2314 maintain
2315 which
2316 of
2317 the
2318 values
2319 contained
2320 in
2321 each
2322 cluster
2323 is
2324 the
2325 root
2326 black
2327 tree
2328 for
2329 the
2330 whole
2331 cluster
2332 and
2333 the
2334 parent
2335 of
2336 the
2337 other
2338 values
2339 in
2340 the
2341 same
2342 cluster
2343 Despite
2344 this
2345 the
2346 operations
2347 on
2348 red
2349 black
2350 trees
2351 are
2352 more
2353 economical
2354 in
2355 time
2356 because
2357 you
2358 don
2359 t
2360 have
2361 to
2362 maintain
2363 the
2364 vector
2365 of
2366 values
2367 foo
2368 It
2369 may
2370 be
2371 costly
2372 if
2373 values
2374 are
2375 stored
2376 directly
2377 in
2378 each
2379 node
2380 rather
2381 than
2382 being
2383 stored
2384 by
2385 reference
2386 B
2387 tree
2388 nodes
2389 however
2390 are
2391 more
2392 economical
2393 in
2394 space
2395 because
2396 you
2397 don
2398 t
2399 need
2400 to
2401 store
2402 the
2403 color
2404 attribute
2405 for
2406 each
2407 node
2408 Instead
2409 you
2410 have
2411 to
2412 know
2413 which
2414 slot
2415 in
2416 the
2417 cluster
2418 vector
2419 is
2420 used
2421 If
2422 values
2423 are
2424 stored
2425 by
2426 reference
2427 e
2428 g
2429 objects
2430 null
2431 references
2432 can
2433 be
2434 used
2435 and
2436 so
2437 the
2438 cluster
2439 can
2440 be
2441 represented
2442 by
2443 a
2444 vector
2445 containing
2446 3
2447 slots
2448 for
2449 value
2450 pointers
2451 plus
2452 4
2453 slots
2454 for
2455 child
2456 references
2457 in
2458 the
2459 tree
2460 In
2461 that
2462 case
2463 the
2464 B
2465 tree
2466 can
2467 be
2468 more
2469 compact
2470 in
2471 memory
2472 improving
2473 data
2474 locality
2475 The
2476 same
2477 analogy
2478 can
2479 be
2480 made
2481 with
2482 B
2483 trees
2484 with
2485 larger
2486 orders
2487 that
2488 can
2489 be
2490 structurally
2491 equivalent
2492 to
2493 a
2494 colored
2495 binary
2496 tree
2497 you
2498 just
2499 need
2500 more
2501 colors
2502 Suppose
2503 that
2504 you
2505 add
2506 blue
2507 then
2508 the
2509 blue
2510 red
2511 black
2512 tree
2513 defined
2514 like
2515 red
2516 black
2517 trees
2518 but
2519 with
2520 the
2521 additional
2522 constraint
2523 that
2524 no
2525 two
2526 successive
2527 nodes
2528 in
2529 the
2530 hierarchy
2531 will
2532 be
2533 blue
2534 and
2535 all
2536 blue
2537 nodes
2538 will
2539 be
2540 children
2541 of
2542 a
2543 red
2544 node
2545 then
2546 it
2547 becomes
2548 equivalent
2549 to
2550 a
2551 B
2552 tree
2553 whose
2554 clusters
2555 will
2556 have
2557 at
2558 most
2559 7
2560 values
2561 in
2562 the
2563 following
2564 colors
2565 blue
2566 red
2567 blue
2568 black
2569 blue
2570 red
2571 blue
2572 For
2573 each
2574 cluster
2575 there
2576 will
2577 be
2578 at
2579 most
2580 1
2581 black
2582 node
2583 2
2584 red
2585 nodes
2586 and
2587 4
2588 blue
2589 nodes
2590 For
2591 moderate
2592 volumes
2593 of
2594 values
2595 insertions
2596 and
2597 deletions
2598 in
2599 a
2600 colored
2601 binary
2602 tree
2603 are
2604 faster
2605 compared
2606 to
2607 B
2608 trees
2609 because
2610 colored
2611 trees
2612 don
2613 t
2614 attempt
2615 to
2616 maximize
2617 the
2618 fill
2619 factor
2620 of
2621 each
2622 horizontal
2623 cluster
2624 of
2625 nodes
2626 only
2627 the
2628 minimum
2629 fill
2630 factor
2631 is
2632 guaranteed
2633 in
2634 colored
2635 binary
2636 trees
2637 limiting
2638 the
2639 number
2640 of
2641 splits
2642 or
2643 junctions
2644 of
2645 clusters
2646 B
2647 trees
2648 will
2649 be
2650 faster
2651 for
2652 performing
2653 rotations
2654 because
2655 rotations
2656 will
2657 frequently
2658 occur
2659 within
2660 the
2661 same
2662 cluster
2663 rather
2664 than
2665 with
2666 multiple
2667 separate
2668 nodes
2669 in
2670 a
2671 colored
2672 binary
2673 tree
2674 However
2675 for
2676 storing
2677 large
2678 volumes
2679 B
2680 trees
2681 will
2682 be
2683 much
2684 faster
2685 as
2686 they
2687 will
2688 be
2689 more
2690 compact
2691 by
2692 grouping
2693 several
2694 children
2695 in
2696 the
2697 same
2698 cluster
2699 where
2700 they
2701 can
2702 be
2703 accessed
2704 locally
2705 All
2706 optimizations
2707 possible
2708 in
2709 B
2710 trees
2711 to
2712 increase
2713 the
2714 average
2715 fill
2716 factors
2717 of
2718 clusters
2719 are
2720 possible
2721 in
2722 the
2723 equivalent
2724 multicolored
2725 binary
2726 tree
2727 Notably
2728 maximizing
2729 the
2730 average
2731 fill
2732 factor
2733 in
2734 a
2735 structurally
2736 equivalent
2737 B
2738 tree
2739 is
2740 the
2741 same
2742 as
2743 reducing
2744 the
2745 total
2746 height
2747 of
2748 the
2749 multicolored
2750 tree
2751 by
2752 increasing
2753 the
2754 number
2755 of
2756 non
2757 black
2758 nodes
2759 The
2760 worst
2761 case
2762 occurs
2763 when
2764 all
2765 nodes
2766 in
2767 a
2768 colored
2769 binary
2770 tree
2771 are
2772 black
2773 the
2774 best
2775 case
2776 occurs
2777 when
2778 only
2779 a
2780 third
2781 of
2782 them
2783 are
2784 black
2785 and
2786 the
2787 other
2788 two
2789 thirds
2790 are
2791 red
2792 nodes
2793 Notes
2794 Jump
2795 up
2796 Using
2797 Knuth
2798 s
2799 definition
2800 of
2801 order
2802 the
2803 maximum
2804 number
2805 of
2806 children
2807 Applications
2808 and
2809 related
2810 data
2811 structures
2812 Red
2813 black
2814 trees
2815 offer
2816 worst
2817 case
2818 guarantees
2819 for
2820 insertion
2821 time
2822 deletion
2823 time
2824 and
2825 search
2826 time
2827 Not
2828 only
2829 does
2830 this
2831 make
2832 them
2833 valuable
2834 in
2835 time
2836 sensitive
2837 applications
2838 such
2839 as
2840 real
2841 time
2842 applications
2843 but
2844 it
2845 makes
2846 them
2847 valuable
2848 building
2849 blocks
2850 in
2851 other
2852 data
2853 structures
2854 which
2855 provide
2856 worst
2857 case
2858 guarantees
2859 for
2860 example
2861 many
2862 data
2863 structures
2864 used
2865 in
2866 computational
2867 geometry
2868 can
2869 be
2870 based
2871 on
2872 red
2873 black
2874 trees
2875 and
2876 the
2877 Completely
2878 Fair
2879 Scheduler
2880 used
2881 in
2882 current
2883 Linux
2884 kernels
2885 uses
2886 red
2887 black
2888 trees
2889 The
2890 AVL
2891 tree
2892 is
2893 another
2894 structure
2895 supporting
2896 O
2897 log
2898 n
2899 search
2900 insertion
2901 and
2902 removal
2903 It
2904 is
2905 more
2906 rigidly
2907 balanced
2908 than
2909 red
2910 black
2911 trees
2912 leading
2913 to
2914 slower
2915 insertion
2916 and
2917 removal
2918 but
2919 faster
2920 retrieval
2921 This
2922 makes
2923 it
2924 attractive
2925 for
2926 data
2927 structures
2928 that
2929 may
2930 be
2931 built
2932 once
2933 and
2934 loaded
2935 without
2936 reconstruction
2937 such
2938 as
2939 language
2940 dictionaries
2941 or
2942 program
2943 dictionaries
2944 such
2945 as
2946 the
2947 opcodes
2948 of
2949 an
2950 assembler
2951 or
2952 interpreter
2953 Red
2954 black
2955 trees
2956 are
2957 also
2958 particularly
2959 valuable
2960 in
2961 functional
2962 programming
2963 where
2964 they
2965 are
2966 one
2967 of
2968 the
2969 most
2970 common
2971 persistent
2972 data
2973 structures
2974 used
2975 to
2976 construct
2977 associative
2978 arrays
2979 and
2980 sets
2981 which
2982 can
2983 retain
2984 previous
2985 versions
2986 after
2987 mutations
2988 The
2989 persistent
2990 version
2991 of
2992 red
2993 black
2994 trees
2995 requires
2996 O
2997 log
2998 n
2999 space
3000 for
3001 each
3002 insertion
3003 or
3004 deletion
3005 in
3006 addition
3007 to
3008 time
3009 For
3010 every
3011 2
3012 4
3013 tree
3014 there
3015 are
3016 corresponding
3017 red
3018 black
3019 trees
3020 with
3021 data
3022 elements
3023 in
3024 the
3025 same
3026 order
3027 The
3028 insertion
3029 and
3030 deletion
3031 operations
3032 on
3033 2
3034 4
3035 trees
3036 are
3037 also
3038 equivalent
3039 to
3040 color
3041 flipping
3042 and
3043 rotations
3044 in
3045 red
3046 black
3047 trees
3048 This
3049 makes
3050 2
3051 4
3052 trees
3053 an
3054 important
3055 tool
3056 for
3057 understanding
3058 the
3059 logic
3060 behind
3061 red
3062 black
3063 trees
3064 and
3065 this
3066 is
3067 why
3068 many
3069 introductory
3070 algorithm
3071 texts
3072 introduce
3073 2
3074 4
3075 trees
3076 just
3077 before
3078 red
3079 black
3080 trees
3081 even
3082 though
3083 2
3084 4
3085 trees
3086 are
3087 not
3088 often
3089 used
3090 in
3091 practice
3092 In
3093 2008
3094 Sedgewick
3095 introduced
3096 a
3097 simpler
3098 version
3099 of
3100 the
3101 red
3102 black
3103 tree
3104 called
3105 the
3106 left
3107 leaning
3108 red
3109 black
3110 tree
3111 6
3112 by
3113 eliminating
3114 a
3115 previously
3116 unspecified
3117 degree
3118 of
3119 freedom
3120 in
3121 the
3122 implementation
3123 The
3124 LLRB
3125 maintains
3126 an
3127 additional
3128 invariant
3129 that
3130 all
3131 red
3132 links
3133 must
3134 lean
3135 left
3136 except
3137 during
3138 inserts
3139 and
3140 deletes
3141 Red
3142 black
3143 trees
3144 can
3145 be
3146 made
3147 isometric
3148 to
3149 either
3150 2
3151 3
3152 trees
3153 7
3154 or
3155 2
3156 4
3157 trees
3158 6
3159 for
3160 any
3161 sequence
3162 of
3163 operations
3164 The
3165 2
3166 4
3167 tree
3168 isometry
3169 was
3170 described
3171 in
3172 1978
3173 by
3174 Sedgewick
3175 this
3176 quote
3177 needs
3178 a
3179 citation
3180 With
3181 2
3182 4
3183 trees
3184 the
3185 isometry
3186 is
3187 resolved
3188 by
3189 a
3190 color
3191 flip
3192 corresponding
3193 to
3194 a
3195 split
3196 in
3197 which
3198 the
3199 red
3200 color
3201 of
3202 two
3203 children
3204 nodes
3205 leaves
3206 the
3207 children
3208 and
3209 moves
3210 to
3211 the
3212 parent
3213 node
3214 The
3215 tango
3216 tree
3217 a
3218 type
3219 of
3220 tree
3221 optimized
3222 for
3223 fast
3224 searches
3225 usually
3226 when
3227 uses
3228 red
3229 black
3230 trees
3231 as
3232 part
3233 of
3234 its
3235 data
3236 structure
3237 Operations
3238 Read
3239 only
3240 operations
3241 on
3242 a
3243 red
3244 black
3245 tree
3246 require
3247 no
3248 modification
3249 from
3250 those
3251 used
3252 for
3253 binary
3254 search
3255 trees
3256 because
3257 every
3258 red
3259 black
3260 tree
3261 is
3262 a
3263 special
3264 case
3265 of
3266 a
3267 simple
3268 binary
3269 search
3270 tree
3271 However
3272 the
3273 immediate
3274 result
3275 of
3276 an
3277 insertion
3278 or
3279 removal
3280 may
3281 violate
3282 the
3283 properties
3284 of
3285 a
3286 red
3287 black
3288 tree
3289 Restoring
3290 the
3291 red
3292 black
3293 properties
3294 requires
3295 a
3296 small
3297 number
3298 O
3299 log
3300 n
3301 or
3302 amortized
3303 O
3304 1
3305 of
3306 color
3307 changes
3308 which
3309 are
3310 very
3311 quick
3312 in
3313 practice
3314 and
3315 no
3316 more
3317 than
3318 three
3319 tree
3320 rotations
3321 two
3322 for
3323 insertion
3324 Although
3325 insert
3326 and
3327 delete
3328 operations
3329 are
3330 complicated
3331 their
3332 times
3333 remain
3334 O
3335 log
3336 n
3337 Insertion
3338 Insertion
3339 begins
3340 by
3341 adding
3342 the
3343 node
3344 as
3345 any
3346 binary
3347 search
3348 tree
3349 insertion
3350 does
3351 and
3352 by
3353 coloring
3354 it
3355 red
3356 Whereas
3357 in
3358 the
3359 binary
3360 search
3361 tree
3362 we
3363 always
3364 add
3365 a
3366 leaf
3367 in
3368 the
3369 red
3370 black
3371 tree
3372 leaves
3373 contain
3374 no
3375 information
3376 so
3377 instead
3378 we
3379 add
3380 a
3381 red
3382 interior
3383 node
3384 with
3385 two
3386 black
3387 leaves
3388 in
3389 place
3390 of
3391 an
3392 existing
3393 black
3394 leaf
3395 What
3396 happens
3397 next
3398 depends
3399 on
3400 the
3401 color
3402 of
3403 other
3404 nearby
3405 nodes
3406 The
3407 term
3408 uncle
3409 node
3410 will
3411 be
3412 used
3413 to
3414 refer
3415 to
3416 the
3417 sibling
3418 of
3419 a
3420 node
3421 s
3422 parent
3423 as
3424 in
3425 human
3426 family
3427 trees
3428 Note
3429 that
3430 property
3431 3
3432 all
3433 leaves
3434 are
3435 black
3436 always
3437 holds
3438 property
3439 4
3440 both
3441 children
3442 of
3443 every
3444 red
3445 node
3446 are
3447 black
3448 is
3449 threatened
3450 only
3451 by
3452 adding
3453 a
3454 red
3455 node
3456 repainting
3457 a
3458 black
3459 node
3460 red
3461 or
3462 a
3463 rotation
3464 property
3465 5
3466 all
3467 paths
3468 from
3469 any
3470 given
3471 node
3472 to
3473 its
3474 leaf
3475 nodes
3476 contain
3477 the
3478 same
3479 number
3480 of
3481 black
3482 nodes
3483 is
3484 threatened
3485 only
3486 by
3487 adding
3488 a
3489 black
3490 node
3491 repainting
3492 a
3493 red
3494 node
3495 black
3496 or
3497 vice
3498 versa
3499 or
3500 a
3501 rotation
3502 Note
3503 The
3504 label
3505 N
3506 will
3507 be
3508 used
3509 to
3510 denote
3511 the
3512 current
3513 node
3514 colored
3515 red
3516 At
3517 the
3518 beginning
3519 this
3520 is
3521 the
3522 new
3523 node
3524 being
3525 inserted
3526 but
3527 the
3528 entire
3529 procedure
3530 may
3531 also
3532 be
3533 applied
3534 recursively
3535 to
3536 other
3537 nodes
3538 see
3539 case
3540 3
3541 P
3542 will
3543 denote
3544 N
3545 s
3546 parent
3547 node
3548 G
3549 will
3550 denote
3551 N
3552 s
3553 grandparent
3554 and
3555 U
3556 will
3557 denote
3558 N
3559 s
3560 uncle
3561 Note
3562 that
3563 in
3564 between
3565 some
3566 cases
3567 the
3568 roles
3569 and
3570 labels
3571 of
3572 the
3573 nodes
3574 are
3575 exchanged
3576 but
3577 in
3578 each
3579 case
3580 every
3581 label
3582 continues
3583 to
3584 represent
3585 the
3586 same
3587 node
3588 it
3589 represented
3590 at
3591 the
3592 beginning
3593 of
3594 the
3595 case
3596 Any
3597 color
3598 shown
3599 in
3600 the
3601 diagram
3602 is
3603 either
3604 assumed
3605 in
3606 its
3607 case
3608 or
3609 implied
3610 by
3611 those
3612 assumptions
3613 A
3614 numbered
3615 triangle
3616 represents
3617 a
3618 subtree
3619 of
3620 unspecified
3621 depth
3622 A
3623 black
3624 circle
3625 atop
3626 the
3627 triangle
3628 designates
3629 a
3630 black
3631 root
3632 node
3633 otherwise
3634 the
3635 root
3636 node
3637 s
3638 color
3639 is
3640 unspecified
3641 Each
3642 case
3643 will
3644 be
3645 demonstrated
3646 with
3647 example
3648 C
3649 code
3650 The
3651 uncle
3652 and
3653 grandparent
3654 nodes
3655 can
3656 be
3657 found
3658 by
3659 these
3660 functions
3661 In
3662 a
3663 regular
3664 binary
3665 search
3666 tree
3667 when
3668 deleting
3669 a
3670 node
3671 with
3672 two
3673 non
3674 leaf
3675 children
3676 we
3677 find
3678 either
3679 the
3680 maximum
3681 element
3682 in
3683 its
3684 left
3685 subtree
3686 which
3687 is
3688 the
3689 in
3690 order
3691 predecessor
3692 or
3693 the
3694 minimum
3695 element
3696 in
3697 its
3698 right
3699 subtree
3700 which
3701 is
3702 the
3703 in
3704 order
3705 successor
3706 and
3707 move
3708 its
3709 value
3710 into
3711 the
3712 node
3713 being
3714 deleted
3715 as
3716 shown
3717 here
3718 We
3719 then
3720 delete
3721 the
3722 node
3723 we
3724 copied
3725 the
3726 value
3727 from
3728 which
3729 must
3730 have
3731 fewer
3732 than
3733 two
3734 non
3735 leaf
3736 children
3737 Non
3738 leaf
3739 children
3740 rather
3741 than
3742 all
3743 children
3744 are
3745 specified
3746 here
3747 because
3748 unlike
3749 normal
3750 binary
3751 search
3752 trees
3753 red
3754 black
3755 trees
3756 can
3757 have
3758 leaf
3759 nodes
3760 anywhere
3761 so
3762 that
3763 all
3764 nodes
3765 are
3766 either
3767 internal
3768 nodes
3769 with
3770 two
3771 children
3772 or
3773 leaf
3774 nodes
3775 with
3776 by
3777 definition
3778 zero
3779 children
3780 In
3781 effect
3782 internal
3783 nodes
3784 having
3785 two
3786 leaf
3787 children
3788 in
3789 a
3790 red
3791 black
3792 tree
3793 are
3794 like
3795 the
3796 leaf
3797 nodes
3798 in
3799 a
3800 regular
3801 binary
3802 search
3803 tree
3804 Because
3805 merely
3806 copying
3807 a
3808 value
3809 does
3810 not
3811 violate
3812 any
3813 red
3814 black
3815 properties
3816 this
3817 reduces
3818 to
3819 the
3820 problem
3821 of
3822 deleting
3823 a
3824 node
3825 with
3826 at
3827 most
3828 one
3829 non
3830 leaf
3831 child
3832 Once
3833 we
3834 have
3835 solved
3836 that
3837 problem
3838 the
3839 solution
3840 applies
3841 equally
3842 to
3843 the
3844 case
3845 where
3846 the
3847 node
3848 we
3849 originally
3850 want
3851 to
3852 delete
3853 has
3854 at
3855 most
3856 one
3857 non
3858 leaf
3859 child
3860 as
3861 to
3862 the
3863 case
3864 just
3865 considered
3866 where
3867 it
3868 has
3869 two
3870 non
3871 leaf
3872 children
3873 Therefore
3874 for
3875 the
3876 remainder
3877 of
3878 this
3879 discussion
3880 we
3881 address
3882 the
3883 deletion
3884 of
3885 a
3886 node
3887 with
3888 at
3889 most
3890 one
3891 non
3892 leaf
3893 child
3894 We
3895 use
3896 the
3897 label
3898 M
3899 to
3900 denote
3901 the
3902 node
3903 to
3904 be
3905 deleted
3906 C
3907 will
3908 denote
3909 a
3910 selected
3911 child
3912 of
3913 M
3914 which
3915 we
3916 will
3917 also
3918 call
3919 its
3920 child
3921 If
3922 M
3923 does
3924 have
3925 a
3926 non
3927 leaf
3928 child
3929 call
3930 that
3931 its
3932 child
3933 C
3934 otherwise
3935 choose
3936 either
3937 leaf
3938 as
3939 its
3940 child
3941 C
3942 If
3943 M
3944 is
3945 a
3946 red
3947 node
3948 we
3949 simply
3950 replace
3951 it
3952 with
3953 its
3954 child
3955 C
3956 which
3957 must
3958 be
3959 black
3960 by
3961 property
3962 4
3963 This
3964 can
3965 only
3966 occur
3967 when
3968 M
3969 has
3970 two
3971 leaf
3972 children
3973 because
3974 if
3975 the
3976 red
3977 node
3978 M
3979 had
3980 a
3981 black
3982 non
3983 leaf
3984 child
3985 on
3986 one
3987 side
3988 but
3989 just
3990 a
3991 leaf
3992 child
3993 on
3994 the
3995 other
3996 side
3997 then
3998 the
3999 count
4000 of
4001 black
4002 nodes
4003 on
4004 both
4005 sides
4006 would
4007 be
4008 different
4009 thus
4010 the
4011 tree
4012 would
4013 violate
4014 property
4015 5
4016 All
4017 paths
4018 through
4019 the
4020 deleted
4021 node
4022 will
4023 simply
4024 pass
4025 through
4026 one
4027 fewer
4028 red
4029 node
4030 and
4031 both
4032 the
4033 deleted
4034 node
4035 s
4036 parent
4037 and
4038 child
4039 must
4040 be
4041 black
4042 so
4043 property
4044 3
4045 all
4046 leaves
4047 are
4048 black
4049 and
4050 property
4051 4
4052 both
4053 children
4054 of
4055 every
4056 red
4057 node
4058 are
4059 black
4060 still
4061 hold
4062 Another
4063 simple
4064 case
4065 is
4066 when
4067 M
4068 is
4069 black
4070 and
4071 C
4072 is
4073 red
4074 Simply
4075 removing
4076 a
4077 black
4078 node
4079 could
4080 break
4081 Properties
4082 4
4083 Both
4084 children
4085 of
4086 every
4087 red
4088 node
4089 are
4090 black
4091 and
4092 5
4093 All
4094 paths
4095 from
4096 any
4097 given
4098 node
4099 to
4100 its
4101 leaf
4102 nodes
4103 contain
4104 the
4105 same
4106 number
4107 of
4108 black
4109 nodes
4110 but
4111 if
4112 we
4113 repaint
4114 C
4115 black
4116 both
4117 of
4118 these
4119 properties
4120 are
4121 preserved
4122 The
4123 complex
4124 case
4125 is
4126 when
4127 both
4128 M
4129 and
4130 C
4131 are
4132 black
4133 This
4134 can
4135 only
4136 occur
4137 when
4138 deleting
4139 a
4140 black
4141 node
4142 which
4143 has
4144 two
4145 leaf
4146 children
4147 because
4148 if
4149 the
4150 black
4151 node
4152 M
4153 had
4154 a
4155 black
4156 non
4157 leaf
4158 child
4159 on
4160 one
4161 side
4162 but
4163 just
4164 a
4165 leaf
4166 child
4167 on
4168 the
4169 other
4170 side
4171 then
4172 the
4173 count
4174 of
4175 black
4176 nodes
4177 on
4178 both
4179 sides
4180 would
4181 be
4182 different
4183 thus
4184 the
4185 tree
4186 would
4187 have
4188 been
4189 an
4190 invalid
4191 red
4192 black
4193 tree
4194 by
4195 violation
4196 of
4197 property
4198 5
4199 We
4200 begin
4201 by
4202 replacing
4203 M
4204 with
4205 its
4206 child
4207 C
4208 We
4209 will
4210 call
4211 or
4212 is
4213 relabel
4214 this
4215 child
4216 in
4217 its
4218 new
4219 position
4220 N
4221 and
4222 its
4223 sibling
4224 its
4225 new
4226 parent
4227 s
4228 other
4229 child
4230 S
4231 S
4232 was
4233 previously
4234 the
4235 sibling
4236 of
4237 M
4238 In
4239 the
4240 diagrams
4241 below
4242 we
4243 will
4244 also
4245 use
4246 P
4247 for
4248 N
4249 s
4250 new
4251 parent
4252 M
4253 s
4254 old
4255 parent
4256 SL
4257 for
4258 S
4259 s
4260 left
4261 child
4262 and
4263 SR
4264 for
4265 S
4266 s
4267 right
4268 child
4269 S
4270 cannot
4271 be
4272 a
4273 leaf
4274 because
4275 if
4276 M
4277 and
4278 C
4279 were
4280 black
4281 then
4282 P
4283 s
4284 one
4285 subtree
4286 which
4287 included
4288 M
4289 counted
4290 two
4291 black
4292 height
4293 and
4294 thus
4295 P
4296 s
4297 other
4298 subtree
4299 which
4300 includes
4301 S
4302 must
4303 also
4304 count
4305 two
4306 black
4307 height
4308 which
4309 cannot
4310 be
4311 the
4312 case
4313 if
4314 S
4315 is
4316 a
4317 leaf
4318 node
4319 Note
4320 In
4321 between
4322 some
4323 cases
4324 we
4325 exchange
4326 the
4327 roles
4328 and
4329 labels
4330 of
4331 the
4332 nodes
4333 but
4334 in
4335 each
4336 case
4337 every
4338 label
4339 continues
4340 to
4341 represent
4342 the
4343 same
4344 node
4345 it
4346 represented
4347 at
4348 the
4349 beginning
4350 of
4351 the
4352 case
4353 Any
4354 color
4355 shown
4356 in
4357 the
4358 diagram
4359 is
4360 either
4361 assumed
4362 in
4363 its
4364 case
4365 or
4366 implied
4367 by
4368 those
4369 assumptions
4370 White
4371 represents
4372 an
4373 unknown
4374 color
4375 either
4376 red
4377 or
4378 black
4379 We
4380 will
4381 find
4382 the
4383 sibling
4384 using
4385 this
4386 function
4387 Hash
4388 table
4389 Not
4390 to
4391 be
4392 confused
4393 with
4394 Hash
4395 list
4396 or
4397 Hash
4398 tree
4399 Hash
4400 table
4401 Type
4402 Unordered
4403 associative
4404 array
4405 Invented
4406 1953
4407 A
4408 small
4409 phone
4410 book
4411 as
4412 a
4413 hash
4414 table
4415 In
4416 computing
4417 a
4418 hash
4419 table
4420 hash
4421 map
4422 is
4423 a
4424 data
4425 structure
4426 used
4427 to
4428 implement
4429 an
4430 associative
4431 array
4432 a
4433 structure
4434 that
4435 can
4436 map
4437 keys
4438 to
4439 values
4440 A
4441 hash
4442 table
4443 uses
4444 a
4445 hash
4446 function
4447 to
4448 compute
4449 an
4450 index
4451 into
4452 an
4453 array
4454 of
4455 buckets
4456 or
4457 slots
4458 from
4459 which
4460 the
4461 correct
4462 value
4463 can
4464 be
4465 found
4466 Ideally
4467 the
4468 hash
4469 function
4470 will
4471 assign
4472 each
4473 key
4474 to
4475 a
4476 unique
4477 bucket
4478 but
4479 this
4480 situation
4481 is
4482 rarely
4483 achievable
4484 in
4485 practice
4486 usually
4487 some
4488 keys
4489 will
4490 hash
4491 to
4492 the
4493 same
4494 bucket
4495 Instead
4496 most
4497 hash
4498 table
4499 designs
4500 assume
4501 that
4502 hash
4503 collisions
4504 different
4505 keys
4506 that
4507 are
4508 assigned
4509 by
4510 the
4511 hash
4512 function
4513 to
4514 the
4515 same
4516 bucket
4517 will
4518 occur
4519 and
4520 must
4521 be
4522 accommodated
4523 in
4524 some
4525 way
4526 In
4527 a
4528 well
4529 dimensioned
4530 hash
4531 table
4532 the
4533 average
4534 cost
4535 number
4536 of
4537 instructions
4538 for
4539 each
4540 lookup
4541 is
4542 independent
4543 of
4544 the
4545 number
4546 of
4547 elements
4548 stored
4549 in
4550 the
4551 table
4552 Many
4553 hash
4554 table
4555 designs
4556 also
4557 allow
4558 arbitrary
4559 insertions
4560 and
4561 deletions
4562 of
4563 key
4564 value
4565 pairs
4566 at
4567 amortized2
4568 constant
4569 average
4570 cost
4571 per
4572 operation34
4573 In
4574 many
4575 situations
4576 hash
4577 tables
4578 turn
4579 out
4580 to
4581 be
4582 more
4583 efficient
4584 than
4585 search
4586 trees
4587 or
4588 any
4589 other
4590 table
4591 lookup
4592 structure
4593 For
4594 this
4595 reason
4596 they
4597 are
4598 widely
4599 used
4600 in
4601 many
4602 kinds
4603 of
4604 computer
4605 software
4606 particularly
4607 for
4608 associative
4609 arrays
4610 database
4611 indexing
4612 caches
4613 and
4614 sets
4615 Hash
4616 function
4617 The
4618 idea
4619 of
4620 hashing
4621 is
4622 to
4623 distribute
4624 the
4625 entries
4626 key
4627 value
4628 pairs
4629 across
4630 an
4631 array
4632 of
4633 buckets
4634 Given
4635 a
4636 key
4637 the
4638 algorithm
4639 computes
4640 an
4641 index
4642 that
4643 suggests
4644 where
4645 the
4646 entry
4647 can
4648 be
4649 found
4650 index
4651 fkey
4652 array
4653 size
4654 Often
4655 this
4656 is
4657 done
4658 in
4659 two
4660 steps
4661 hash
4662 hashfunckey
4663 index
4664 hash
4665 array
4666 size
4667 In
4668 this
4669 method
4670 the
4671 hash
4672 is
4673 independent
4674 of
4675 the
4676 array
4677 size
4678 and
4679 it
4680 is
4681 then
4682 reduced
4683 to
4684 an
4685 index
4686 a
4687 number
4688 between
4689 0
4690 and
4691 array
4692 size
4693 1
4694 using
4695 the
4696 modulo
4697 operator
4698 In
4699 the
4700 case
4701 that
4702 the
4703 array
4704 size
4705 is
4706 a
4707 power
4708 of
4709 two
4710 the
4711 remainder
4712 operation
4713 is
4714 reduced
4715 to
4716 masking
4717 which
4718 improves
4719 speed
4720 but
4721 can
4722 increase
4723 problems
4724 with
4725 a
4726 poor
4727 hash
4728 function
4729 Choosing
4730 a
4731 good
4732 hash
4733 function
4734 A
4735 good
4736 hash
4737 function
4738 and
4739 implementation
4740 algorithm
4741 are
4742 essential
4743 for
4744 good
4745 hash
4746 table
4747 performance
4748 but
4749 may
4750 be
4751 difficult
4752 to
4753 achieve
4754 A
4755 basic
4756 requirement
4757 is
4758 that
4759 the
4760 function
4761 should
4762 provide
4763 a
4764 uniform
4765 distribution
4766 of
4767 hash
4768 values
4769 A
4770 non
4771 uniform
4772 distribution
4773 increases
4774 the
4775 number
4776 of
4777 collisions
4778 and
4779 the
4780 cost
4781 of
4782 resolving
4783 them
4784 Uniformity
4785 is
4786 sometimes
4787 difficult
4788 to
4789 ensure
4790 by
4791 design
4792 but
4793 may
4794 be
4795 evaluated
4796 empirically
4797 using
4798 statistical
4799 tests
4800 eg
4801 a
4802 Pearsons
4803 chi
4804 squared
4805 test
4806 for
4807 discrete
4808 uniform
4809 distributions56
4810 The
4811 distribution
4812 needs
4813 to
4814 be
4815 uniform
4816 only
4817 for
4818 table
4819 sizes
4820 that
4821 occur
4822 in
4823 the
4824 application
4825 In
4826 particular
4827 if
4828 one
4829 uses
4830 dynamic
4831 resizing
4832 with
4833 exact
4834 doubling
4835 and
4836 halving
4837 of
4838 the
4839 table
4840 size
4841 s
4842 then
4843 the
4844 hash
4845 function
4846 needs
4847 to
4848 be
4849 uniform
4850 only
4851 when
4852 s
4853 is
4854 a
4855 power
4856 of
4857 two
4858 On
4859 the
4860 other
4861 hand
4862 some
4863 hashing
4864 algorithms
4865 provide
4866 uniform
4867 hashes
4868 only
4869 when
4870 s
4871 is
4872 a
4873 prime
4874 number7
4875 For
4876 open
4877 addressing
4878 schemes
4879 the
4880 hash
4881 function
4882 should
4883 also
4884 avoid
4885 clustering
4886 the
4887 mapping
4888 of
4889 two
4890 or
4891 more
4892 keys
4893 to
4894 consecutive
4895 slots
4896 Such
4897 clustering
4898 may
4899 cause
4900 the
4901 lookup
4902 cost
4903 to
4904 skyrocket
4905 even
4906 if
4907 the
4908 load
4909 factor
4910 is
4911 low
4912 and
4913 collisions
4914 are
4915 infrequent
4916 The
4917 popular
4918 multiplicative
4919 hash3
4920 is
4921 claimed
4922 to
4923 have
4924 particularly
4925 poor
4926 clustering
4927 behavior7
4928 Cryptographic
4929 hash
4930 functions
4931 are
4932 believed
4933 to
4934 provide
4935 good
4936 hash
4937 functions
4938 for
4939 any
4940 table
4941 size
4942 s
4943 either
4944 by
4945 modulo
4946 reduction
4947 or
4948 by
4949 bit
4950 masking
4951 They
4952 may
4953 also
4954 be
4955 appropriate
4956 if
4957 there
4958 is
4959 a
4960 risk
4961 of
4962 malicious
4963 users
4964 trying
4965 to
4966 sabotage
4967 a
4968 network
4969 service
4970 by
4971 submitting
4972 requests
4973 designed
4974 to
4975 generate
4976 a
4977 large
4978 number
4979 of
4980 collisions
4981 in
4982 the
4983 servers
4984 hash
4985 tables
4986 However
4987 the
4988 risk
4989 of
4990 sabotage
4991 can
4992 also
4993 be
4994 avoided
4995 by
4996 cheaper
4997 methods
4998 such
4999 as
5000 Hash
5001 table
5002 Not
5003 to
5004 be
5005 confused
5006 with
5007 Hash
5008 list
5009 or
5010 Hash
5011 tree
5012 Hash
5013 table
5014 Type
5015 Unordered
5016 associative
5017 array
5018 Invented
5019 1953
5020 A
5021 small
5022 phone
5023 book
5024 as
5025 a
5026 hash
5027 table
5028 In
5029 computing
5030 a
5031 hash
5032 table
5033 hash
5034 map
5035 is
5036 a
5037 data
5038 structure
5039 used
5040 to
5041 implement
5042 an
5043 associative
5044 array
5045 a
5046 structure
5047 that
5048 can
5049 map
5050 keys
5051 to
5052 values
5053 A
5054 hash
5055 table
5056 uses
5057 a
5058 hash
5059 function
5060 to
5061 compute
5062 an
5063 index
5064 into
5065 an
5066 array
5067 of
5068 buckets
5069 or
5070 slots
5071 from
5072 which
5073 the
5074 correct
5075 value
5076 can
5077 be
5078 found
5079 Ideally
5080 the
5081 hash
5082 function
5083 will
5084 assign
5085 each
5086 key
5087 to
5088 a
5089 unique
5090 bucket
5091 but
5092 this
5093 situation
5094 is
5095 rarely
5096 achievable
5097 in
5098 practice
5099 usually
5100 some
5101 keys
5102 will
5103 hash
5104 to
5105 the
5106 same
5107 bucket
5108 Instead
5109 most
5110 hash
5111 table
5112 designs
5113 assume
5114 that
5115 hash
5116 collisions
5117 different
5118 keys
5119 that
5120 are
5121 assigned
5122 by
5123 the
5124 hash
5125 function
5126 to
5127 the
5128 same
5129 bucket
5130 will
5131 occur
5132 and
5133 must
5134 be
5135 accommodated
5136 in
5137 some
5138 way
5139 In
5140 a
5141 well
5142 dimensioned
5143 hash
5144 table
5145 the
5146 average
5147 cost
5148 number
5149 of
5150 instructions
5151 for
5152 each
5153 lookup
5154 is
5155 independent
5156 of
5157 the
5158 number
5159 of
5160 elements
5161 stored
5162 in
5163 the
5164 table
5165 Many
5166 hash
5167 table
5168 designs
5169 also
5170 allow
5171 arbitrary
5172 insertions
5173 and
5174 deletions
5175 of
5176 key
5177 value
5178 pairs
5179 at
5180 amortized2
5181 constant
5182 average
5183 cost
5184 per
5185 operation34
5186 In
5187 many
5188 situations
5189 hash
5190 tables
5191 turn
5192 out
5193 to
5194 be
5195 more
5196 efficient
5197 than
5198 search
5199 trees
5200 or
5201 any
5202 other
5203 table
5204 lookup
5205 structure
5206 For
5207 this
5208 reason
5209 they
5210 are
5211 widely
5212 used
5213 in
5214 many
5215 kinds
5216 of
5217 computer
5218 software
5219 particularly
5220 for
5221 associative
5222 arrays
5223 database
5224 indexing
5225 caches
5226 and
5227 sets
5228 Hash
5229 function
5230 The
5231 idea
5232 of
5233 hashing
5234 is
5235 to
5236 distribute
5237 the
5238 entries
5239 key
5240 value
5241 pairs
5242 across
5243 an
5244 array
5245 of
5246 buckets
5247 Given
5248 a
5249 key
5250 the
5251 algorithm
5252 computes
5253 an
5254 index
5255 that
5256 suggests
5257 where
5258 the
5259 entry
5260 can
5261 be
5262 found
5263 index
5264 fkey
5265 array
5266 size
5267 Often
5268 this
5269 is
5270 done
5271 in
5272 two
5273 steps
5274 hash
5275 hashfunckey
5276 index
5277 hash
5278 array
5279 size
5280 In
5281 this
5282 method
5283 the
5284 hash
5285 is
5286 independent
5287 of
5288 the
5289 array
5290 size
5291 and
5292 it
5293 is
5294 then
5295 reduced
5296 to
5297 an
5298 index
5299 a
5300 number
5301 between
5302 0
5303 and
5304 array
5305 size
5306 1
5307 using
5308 the
5309 modulo
5310 operator
5311 In
5312 the
5313 case
5314 that
5315 the
5316 array
5317 size
5318 is
5319 a
5320 power
5321 of
5322 two
5323 the
5324 remainder
5325 operation
5326 is
5327 reduced
5328 to
5329 masking
5330 which
5331 improves
5332 speed
5333 but
5334 can
5335 increase
5336 problems
5337 with
5338 a
5339 poor
5340 hash
5341 function
5342 Choosing
5343 a
5344 good
5345 hash
5346 function
5347 A
5348 good
5349 hash
5350 function
5351 and
5352 implementation
5353 algorithm
5354 are
5355 essential
5356 for
5357 good
5358 hash
5359 table
5360 performance
5361 but
5362 may
5363 be
5364 difficult
5365 to
5366 achieve
5367 A
5368 basic
5369 requirement
5370 is
5371 that
5372 the
5373 function
5374 should
5375 provide
5376 a
5377 uniform
5378 distribution
5379 of
5380 hash
5381 values
5382 A
5383 non
5384 uniform
5385 distribution
5386 increases
5387 the
5388 number
5389 of
5390 collisions
5391 and
5392 the
5393 cost
5394 of
5395 resolving
5396 them
5397 Uniformity
5398 is
5399 sometimes
5400 difficult
5401 to
5402 ensure
5403 by
5404 design
5405 but
5406 may
5407 be
5408 evaluated
5409 empirically
5410 using
5411 statistical
5412 tests
5413 eg
5414 a
5415 Pearsons
5416 chi
5417 squared
5418 test
5419 for
5420 discrete
5421 uniform
5422 distributions56
5423 The
5424 distribution
5425 needs
5426 to
5427 be
5428 uniform
5429 only
5430 for
5431 table
5432 sizes
5433 that
5434 occur
5435 in
5436 the
5437 application
5438 In
5439 particular
5440 if
5441 one
5442 uses
5443 dynamic
5444 resizing
5445 with
5446 exact
5447 doubling
5448 and
5449 halving
5450 of
5451 the
5452 table
5453 size
5454 s
5455 then
5456 the
5457 hash
5458 function
5459 needs
5460 to
5461 be
5462 uniform
5463 only
5464 when
5465 s
5466 is
5467 a
5468 power
5469 of
5470 two
5471 On
5472 the
5473 other
5474 hand
5475 some
5476 hashing
5477 algorithms
5478 provide
5479 uniform
5480 hashes
5481 only
5482 when
5483 s
5484 is
5485 a
5486 prime
5487 number7
5488 For
5489 open
5490 addressing
5491 schemes
5492 the
5493 hash
5494 function
5495 should
5496 also
5497 avoid
5498 clustering
5499 the
5500 mapping
5501 of
5502 two
5503 or
5504 more
5505 keys
5506 to
5507 consecutive
5508 slots
5509 Such
5510 clustering
5511 may
5512 cause
5513 the
5514 lookup
5515 cost
5516 to
5517 skyrocket
5518 even
5519 if
5520 the
5521 load
5522 factor
5523 is
5524 low
5525 and
5526 collisions
5527 are
5528 infrequent
5529 The
5530 popular
5531 multiplicative
5532 hash3
5533 is
5534 claimed
5535 to
5536 have
5537 particularly
5538 poor
5539 clustering
5540 behavior7
5541 Cryptographic
5542 hash
5543 functions
5544 are
5545 believed
5546 to
5547 provide
5548 good
5549 hash
5550 functions
5551 for
5552 any
5553 table
5554 size
5555 s
5556 either
5557 by
5558 modulo
5559 reduction
5560 or
5561 by
5562 bit
5563 masking
5564 They
5565 may
5566 also
5567 be
5568 appropriate
5569 if
5570 there
5571 is
5572 a
5573 risk
5574 of
5575 malicious
5576 users
5577 trying
5578 to
5579 sabotage
5580 a
5581 network
5582 service
5583 by
5584 submitting
5585 requests
5586 designed
5587 to
5588 generate
5589 a
5590 large
5591 number
5592 of
5593 collisions
5594 in
5595 the
5596 servers
5597 hash
5598 tables
5599 However
5600 the
5601 risk
5602 of
5603 sabotage
5604 can
5605 also
5606 be
5607 avoided
5608 by
5609 cheaper
5610 methods
5611 such
5612 as
5613 applying
5614 a
5615 secret
5616 salt
5617 to
5618 the
5619 data
5620 or
5621 using
5622 a
5623 universal
5624 hash
5625 function
5626 Perfect
5627 hash
5628 function
5629 If
5630 all
5631 keys
5632 are
5633 known
5634 ahead
5635 of
5636 time
5637 a
5638 perfect
5639 hash
5640 function
5641 can
5642 be
5643 used
5644 to
5645 create
5646 a
5647 perfect
5648 hash
5649 table
5650 that
5651 has
5652 no
5653 collisions
5654 If
5655 minimal
5656 perfect
5657 hashing
5658 is
5659 used
5660 every
5661 location
5662 in
5663 the
5664 hash
5665 table
5666 can
5667 be
5668 used
5669 as
5670 well
5671 Perfect
5672 hashing
5673 allows
5674 for
5675 constant
5676 time
5677 lookups
5678 in
5679 the
5680 worst
5681 case
5682 This
5683 is
5684 in
5685 contrast
5686 to
5687 most
5688 chaining
5689 and
5690 open
5691 addressing
5692 methods
5693 where
5694 the
5695 time
5696 for
5697 lookup
5698 is
5699 low
5700 on
5701 average
5702 but
5703 may
5704 be
5705 very
5706 large
5707 proportional
5708 to
5709 the
5710 number
5711 of
5712 entries
5713 for
5714 some
5715 sets
5716 of
5717 keys
5718 Key
5719 statistics
5720 A
5721 critical
5722 statistic
5723 for
5724 a
5725 hash
5726 table
5727 is
5728 called
5729 the
5730 load
5731 factor
5732 This
5733 is
5734 simply
5735 the
5736 number
5737 of
5738 entries
5739 divided
5740 by
5741 the
5742 number
5743 of
5744 buckets
5745 that
5746 is
5747 n
5748 k
5749 where
5750 n
5751 is
5752 the
5753 number
5754 of
5755 entries
5756 and
5757 k
5758 is
5759 the
5760 number
5761 of
5762 buckets
5763 If
5764 the
5765 load
5766 factor
5767 is
5768 kept
5769 reasonable
5770 the
5771 hash
5772 table
5773 should
5774 perform
5775 well
5776 provided
5777 the
5778 hashing
5779 is
5780 good
5781 If
5782 the
5783 load
5784 factor
5785 grows
5786 too
5787 large
5788 the
5789 hash
5790 table
5791 will
5792 become
5793 slow
5794 or
5795 it
5796 may
5797 fail
5798 to
5799 work
5800 depending
5801 on
5802 the
5803 method
5804 used
5805 The
5806 expected
5807 constant
5808 time
5809 property
5810 of
5811 a
5812 hash
5813 table
5814 assumes
5815 that
5816 the
5817 load
5818 factor
5819 is
5820 kept
5821 below
5822 some
5823 bound
5824 For
5825 a
5826 fixed
5827 number
5828 of
5829 buckets
5830 the
5831 time
5832 for
5833 a
5834 lookup
5835 grows
5836 with
5837 the
5838 number
5839 of
5840 entries
5841 and
5842 so
5843 does
5844 not
5845 achieve
5846 the
5847 desired
5848 constant
5849 time
5850 Second
5851 to
5852 that
5853 one
5854 can
5855 examine
5856 the
5857 variance
5858 of
5859 number
5860 of
5861 entries
5862 per
5863 bucket
5864 For
5865 example
5866 two
5867 tables
5868 both
5869 have
5870 1000
5871 entries
5872 and
5873 1000
5874 buckets
5875 one
5876 has
5877 exactly
5878 one
5879 entry
5880 in
5881 each
5882 bucket
5883 the
5884 other
5885 has
5886 all
5887 entries
5888 in
5889 the
5890 same
5891 bucket
5892 Clearly
5893 the
5894 hashing
5895 is
5896 not
5897 working
5898 in
5899 the
5900 second
5901 one
5902 A
5903 low
5904 load
5905 factor
5906 is
5907 not
5908 especially
5909 beneficial
5910 As
5911 the
5912 load
5913 factor
5914 approaches
5915 0
5916 the
5917 proportion
5918 of
5919 unused
5920 areas
5921 in
5922 the
5923 hash
5924 table
5925 increases
5926 but
5927 there
5928 is
5929 not
5930 necessarily
5931 any
5932 reduction
5933 in
5934 search
5935 cost
5936 This
5937 results
5938 in
5939 wasted
5940 memory
5941 Collision
5942 resolution
5943 Hash
5944 collisions
5945 are
5946 practically
5947 unavoidable
5948 when
5949 hashing
5950 a
5951 random
5952 subset
5953 of
5954 a
5955 large
5956 set
5957 of
5958 possible
5959 keys
5960 For
5961 example
5962 if
5963 2
5964 450
5965 keys
5966 are
5967 hashed
5968 into
5969 a
5970 million
5971 buckets
5972 even
5973 with
5974 a
5975 perfectly
5976 uniform
5977 random
5978 distribution
5979 according
5980 to
5981 the
5982 birthday
5983 problem
5984 there
5985 is
5986 approximately
5987 a
5988 95
5989 chance
5990 of
5991 at
5992 least
5993 two
5994 of
5995 the
5996 keys
5997 being
5998 hashed
5999 to
6000 the
6001 same
6002 slot
6003 Therefore
6004 most
6005 hash
6006 table
6007 implementations
6008 have
6009 some
6010 collision
6011 resolution
6012 strategy
6013 to
6014 handle
6015 such
6016 events
6017 Some
6018 common
6019 strategies
6020 are
6021 described
6022 below
6023 All
6024 these
6025 methods
6026 require
6027 that
6028 the
6029 keys
6030 or
6031 pointers
6032 to
6033 them
6034 be
6035 stored
6036 in
6037 the
6038 table
6039 together
6040 with
6041 the
6042 associated
6043 values
6044 Separate
6045 chaining
6046 Hash
6047 collision
6048 resolved
6049 by
6050 separate
6051 chaining
6052 In
6053 the
6054 method
6055 known
6056 as
6057 separate
6058 chaining
6059 each
6060 bucket
6061 is
6062 independent
6063 and
6064 has
6065 some
6066 sort
6067 of
6068 list
6069 of
6070 entries
6071 with
6072 the
6073 same
6074 index
6075 The
6076 time
6077 for
6078 hash
6079 table
6080 operations
6081 is
6082 the
6083 time
6084 to
6085 find
6086 the
6087 bucket
6088 which
6089 is
6090 constant
6091 plus
6092 the
6093 time
6094 for
6095 the
6096 list
6097 operation
6098 The
6099 technique
6100 is
6101 also
6102 called
6103 open
6104 hashing
6105 or
6106 closed
6107 addressing
6108 In
6109 a
6110 good
6111 hash
6112 table
6113 each
6114 bucket
6115 has
6116 zero
6117 or
6118 one
6119 entries
6120 and
6121 sometimes
6122 two
6123 or
6124 three
6125 but
6126 rarely
6127 more
6128 than
6129 that
6130 Therefore
6131 structures
6132 that
6133 are
6134 efficient
6135 in
6136 time
6137 and
6138 space
6139 for
6140 these
6141 cases
6142 are
6143 preferred
6144 Structures
6145 that
6146 are
6147 efficient
6148 for
6149 a
6150 fairly
6151 large
6152 number
6153 of
6154 entries
6155 per
6156 bucket
6157 are
6158 not
6159 needed
6160 or
6161 desirable
6162 If
6163 these
6164 cases
6165 happen
6166 often
6167 the
6168 hashing
6169 is
6170 not
6171 working
6172 well
6173 and
6174 this
6175 needs
6176 to
6177 be
6178 fixed
6179 Separate
6180 chaining
6181 with
6182 linked
6183 lists
6184 Chained
6185 hash
6186 tables
6187 with
6188 linked
6189 lists
6190 are
6191 popular
6192 because
6193 they
6194 require
6195 only
6196 basic
6197 data
6198 structures
6199 with
6200 simple
6201 algorithms
6202 and
6203 can
6204 use
6205 simple
6206 hash
6207 functions
6208 that
6209 are
6210 unsuitable
6211 for
6212 other
6213 methods
6214 The
6215 cost
6216 of
6217 a
6218 table
6219 operation
6220 is
6221 that
6222 of
6223 scanning
6224 the
6225 entries
6226 of
6227 the
6228 selected
6229 bucket
6230 for
6231 the
6232 desired
6233 key
6234 If
6235 the
6236 distribution
6237 of
6238 keys
6239 is
6240 sufficiently
6241 uniform
6242 the
6243 average
6244 cost
6245 of
6246 a
6247 lookup
6248 depends
6249 only
6250 on
6251 the
6252 average
6253 number
6254 of
6255 keys
6256 per
6257 bucket
6258 that
6259 is
6260 on
6261 the
6262 load
6263 factor
6264 Chained
6265 hash
6266 tables
6267 remain
6268 effective
6269 even
6270 when
6271 the
6272 number
6273 of
6274 table
6275 entries
6276 n
6277 is
6278 much
6279 higher
6280 than
6281 the
6282 number
6283 of
6284 slots
6285 Their
6286 performance
6287 degrades
6288 more
6289 gracefully
6290 linearly
6291 with
6292 the
6293 load
6294 factor
6295 For
6296 example
6297 a
6298 chained
6299 hash
6300 table
6301 with
6302 1000
6303 slots
6304 and
6305 10
6306 000
6307 stored
6308 keys
6309 load
6310 factor
6311 10
6312 is
6313 five
6314 to
6315 ten
6316 times
6317 slower
6318 than
6319 a
6320 10
6321 000
6322 slot
6323 table
6324 load
6325 factor
6326 1
6327 but
6328 still
6329 1000
6330 times
6331 faster
6332 than
6333 a
6334 plain
6335 sequential
6336 list
6337 and
6338 possibly
6339 even
6340 faster
6341 than
6342 a
6343 balanced
6344 search
6345 tree
6346 For
6347 separate
6348 chaining
6349 the
6350 worst
6351 case
6352 scenario
6353 is
6354 when
6355 all
6356 entries
6357 are
6358 inserted
6359 into
6360 the
6361 same
6362 bucket
6363 in
6364 which
6365 case
6366 the
6367 hash
6368 table
6369 is
6370 ineffective
6371 and
6372 the
6373 cost
6374 is
6375 that
6376 of
6377 searching
6378 the
6379 bucket
6380 data
6381 structure
6382 If
6383 the
6384 latter
6385 is
6386 a
6387 linear
6388 list
6389 the
6390 lookup
6391 procedure
6392 may
6393 have
6394 to
6395 scan
6396 all
6397 its
6398 entries
6399 so
6400 the
6401 worst
6402 case
6403 cost
6404 is
6405 proportional
6406 to
6407 the
6408 number
6409 n
6410 of
6411 entries
6412 in
6413 the
6414 table
6415 The
6416 bucket
6417 chains
6418 are
6419 often
6420 implemented
6421 as
6422 ordered
6423 lists
6424 sorted
6425 by
6426 the
6427 key
6428 field
6429 this
6430 choice
6431 approximately
6432 halves
6433 the
6434 average
6435 cost
6436 of
6437 unsuccessful
6438 lookups
6439 compared
6440 to
6441 an
6442 unordered
6443 list
6444 However
6445 if
6446 some
6447 keys
6448 are
6449 much
6450 more
6451 likely
6452 to
6453 come
6454 up
6455 than
6456 others
6457 an
6458 unordered
6459 list
6460 with
6461 move
6462 to
6463 front
6464 heuristic
6465 may
6466 be
6467 more
6468 effective
6469 More
6470 sophisticated
6471 data
6472 structures
6473 such
6474 as
6475 balanced
6476 search
6477 trees
6478 are
6479 worth
6480 considering
6481 only
6482 if
6483 the
6484 load
6485 factor
6486 is
6487 large
6488 about
6489 10
6490 or
6491 more
6492 or
6493 if
6494 the
6495 hash
6496 distribution
6497 is
6498 likely
6499 to
6500 be
6501 very
6502 non
6503 uniform
6504 or
6505 if
6506 one
6507 must
6508 guarantee
6509 good
6510 performance
6511 even
6512 in
6513 a
6514 worst
6515 case
6516 scenario
6517 However
6518 using
6519 a
6520 larger
6521 table
6522 and
6523 or
6524 a
6525 better
6526 hash
6527 function
6528 may
6529 be
6530 even
6531 more
6532 effective
6533 in
6534 those
6535 cases
6536 Chained
6537 hash
6538 tables
6539 also
6540 inherit
6541 the
6542 disadvantages
6543 of
6544 linked
6545 lists
6546 When
6547 storing
6548 small
6549 keys
6550 and
6551 values
6552 the
6553 space
6554 overhead
6555 of
6556 the
6557 next
6558 pointer
6559 in
6560 each
6561 entry
6562 record
6563 can
6564 be
6565 significant
6566 An
6567 additional
6568 disadvantage
6569 is
6570 that
6571 traversing
6572 a
6573 linked
6574 list
6575 has
6576 poor
6577 cache
6578 performance
6579 making
6580 the
6581 processor
6582 cache
6583 ineffective
6584 Separate
6585 chaining
6586 with
6587 list
6588 head
6589 cells
6590 Hash
6591 collision
6592 by
6593 separate
6594 chaining
6595 with
6596 head
6597 records
6598 in
6599 the
6600 bucket
6601 array
6602 Some
6603 chaining
6604 implementations
6605 store
6606 the
6607 first
6608 record
6609 of
6610 each
6611 chain
6612 in
6613 the
6614 slot
6615 array
6616 itself4
6617 The
6618 number
6619 of
6620 pointer
6621 traversals
6622 is
6623 decreased
6624 by
6625 one
6626 for
6627 most
6628 cases
6629 The
6630 purpose
6631 is
6632 to
6633 increase
6634 cache
6635 efficiency
6636 of
6637 hash
6638 table
6639 access
6640 The
6641 disadvantage
6642 is
6643 that
6644 an
6645 empty
6646 bucket
6647 takes
6648 the
6649 same
6650 space
6651 as
6652 a
6653 bucket
6654 with
6655 one
6656 entry
6657 To
6658 save
6659 space
6660 such
6661 hash
6662 tables
6663 often
6664 have
6665 about
6666 as
6667 many
6668 slots
6669 as
6670 stored
6671 entries
6672 meaning
6673 that
6674 many
6675 slots
6676 have
6677 two
6678 or
6679 more
6680 entries
6681 Separate
6682 chaining
6683 with
6684 other
6685 structures
6686 Instead
6687 of
6688 a
6689 list
6690 one
6691 can
6692 use
6693 any
6694 other
6695 data
6696 structure
6697 that
6698 supports
6699 the
6700 required
6701 operations
6702 For
6703 example
6704 by
6705 using
6706 a
6707 self
6708 balancing
6709 tree
6710 the
6711 theoretical
6712 worst
6713 case
6714 time
6715 of
6716 common
6717 hash
6718 table
6719 operations
6720 insertion
6721 deletion
6722 lookup
6723 can
6724 be
6725 brought
6726 down
6727 to
6728 Olog
6729 n
6730 rather
6731 than
6732 On
6733 However
6734 this
6735 approach
6736 is
6737 only
6738 worth
6739 the
6740 trouble
6741 and
6742 extra
6743 memory
6744 cost
6745 if
6746 long
6747 delays
6748 must
6749 be
6750 avoided
6751 at
6752 all
6753 costs
6754 eg
6755 in
6756 a
6757 real
6758 time
6759 application
6760 or
6761 if
6762 one
6763 must
6764 guard
6765 against
6766 many
6767 entries
6768 hashed
6769 to
6770 the
6771 same
6772 slot
6773 eg
6774 if
6775 one
6776 expects
6777 extremely
6778 non
6779 uniform
6780 distributions
6781 or
6782 in
6783 the
6784 case
6785 of
6786 web
6787 sites
6788 or
6789 other
6790 publicly
6791 accessible
6792 services
6793 which
6794 are
6795 vulnerable
6796 to
6797 malicious
6798 key
6799 distributions
6800 in
6801 requests
6802 The
6803 variant
6804 called
6805 array
6806 hash
6807 table
6808 uses
6809 a
6810 dynamic
6811 array
6812 to
6813 store
6814 all
6815 the
6816 entries
6817 that
6818 hash
6819 to
6820 the
6821 same
6822 slot8910
6823 Each
6824 newly
6825 inserted
6826 entry
6827 gets
6828 appended
6829 to
6830 the
6831 end
6832 of
6833 the
6834 dynamic
6835 array
6836 that
6837 is
6838 assigned
6839 to
6840 the
6841 slot
6842 The
6843 dynamic
6844 array
6845 is
6846 resized
6847 in
6848 an
6849 exact
6850 fit
6851 manner
6852 meaning
6853 it
6854 is
6855 grown
6856 only
6857 by
6858 as
6859 many
6860 bytes
6861 as
6862 needed
6863 Alternative
6864 techniques
6865 such
6866 as
6867 growing
6868 the
6869 array
6870 by
6871 block
6872 sizes
6873 or
6874 pages
6875 were
6876 found
6877 to
6878 improve
6879 insertion
6880 performance
6881 but
6882 at
6883 a
6884 cost
6885 in
6886 space
6887 This
6888 variation
6889 makes
6890 more
6891 efficient
6892 use
6893 of
6894 CPU
6895 caching
6896 and
6897 the
6898 translation
6899 lookaside
6900 buffer
6901 TLB
6902 because
6903 slot
6904 entries
6905 are
6906 stored
6907 in
6908 sequential
6909 memory
6910 positions
6911 It
6912 also
6913 dispenses
6914 with
6915 the
6916 next
6917 pointers
6918 that
6919 are
6920 required
6921 by
6922 linked
6923 lists
6924 which
6925 saves
6926 space
6927 Despite
6928 frequent
6929 array
6930 resizing
6931 space
6932 overheads
6933 incurred
6934 by
6935 operating
6936 system
6937 such
6938 as
6939 memory
6940 fragmentation
6941 were
6942 found
6943 to
6944 be
6945 small
6946 An
6947 elaboration
6948 on
6949 this
6950 approach
6951 is
6952 the
6953 so
6954 called
6955 dynamic
6956 perfect
6957 hashing
6958 11
6959 where
6960 a
6961 bucket
6962 that
6963 contains
6964 k
6965 entries
6966 is
6967 organized
6968 as
6969 a
6970 perfect
6971 hash
6972 table
6973 with
6974 k2
6975 slots
6976 While
6977 it
6978 uses
6979 more
6980 memory
6981 n2
6982 slots
6983 for
6984 n
6985 entries
6986 in
6987 the
6988 worst
6989 case
6990 and
6991 n
6992 k
6993 slots
6994 in
6995 the
6996 average
6997 case
6998 this
6999 variant
7000 has
7001 guaranteed
7002 constant
7003 worst
7004 case
7005 lookup
7006 time
7007 and
7008 low
7009 amortized
7010 time
7011 for
7012 insertion
7013 Open
7014 addressing
7015 Hash
7016 collision
7017 resolved
7018 by
7019 open
7020 addressing
7021 with
7022 linear
7023 probing
7024 interval
7025 1
7026 Note
7027 that
7028 Ted
7029 Baker
7030 has
7031 a
7032 unique
7033 hash
7034 but
7035 nevertheless
7036 collided
7037 with
7038 Sandra
7039 Dee
7040 that
7041 had
7042 previously
7043 collided
7044 with
7045 John
7046 Smith
7047 In
7048 another
7049 strategy
7050 called
7051 open
7052 addressing
7053 all
7054 entry
7055 records
7056 are
7057 stored
7058 in
7059 the
7060 bucket
7061 array
7062 itself
7063 When
7064 a
7065 new
7066 entry
7067 has
7068 to
7069 be
7070 inserted
7071 the
7072 buckets
7073 are
7074 examined
7075 starting
7076 with
7077 the
7078 hashed
7079 to
7080 slot
7081 and
7082 proceeding
7083 in
7084 some
7085 probe
7086 sequence
7087 until
7088 an
7089 unoccupied
7090 slot
7091 is
7092 found
7093 When
7094 searching
7095 for
7096 an
7097 entry
7098 the
7099 buckets
7100 are
7101 scanned
7102 in
7103 the
7104 same
7105 sequence
7106 until
7107 either
7108 the
7109 target
7110 record
7111 is
7112 found
7113 or
7114 an
7115 unused
7116 array
7117 slot
7118 is
7119 found
7120 which
7121 indicates
7122 that
7123 there
7124 is
7125 no
7126 such
7127 key
7128 in
7129 the
7130 table12
7131 The
7132 name
7133 open
7134 addressing
7135 refers
7136 to
7137 the
7138 fact
7139 that
7140 the
7141 location
7142 address
7143 of
7144 the
7145 item
7146 is
7147 not
7148 determined
7149 by
7150 its
7151 hash
7152 value
7153 This
7154 method
7155 is
7156 also
7157 called
7158 closed
7159 hashing
7160 it
7161 should
7162 not
7163 be
7164 confused
7165 with
7166 open
7167 hashing
7168 or
7169 closed
7170 addressing
7171 that
7172 usually
7173 mean
7174 separate
7175 chaining
7176 Well
7177 known
7178 probe
7179 sequences
7180 include
7181 Linear
7182 probing
7183 in
7184 which
7185 the
7186 interval
7187 between
7188 probes
7189 is
7190 fixed
7191 usually
7192 1
7193 Quadratic
7194 probing
7195 in
7196 which
7197 the
7198 interval
7199 between
7200 probes
7201 is
7202 increased
7203 by
7204 adding
7205 the
7206 successive
7207 outputs
7208 of
7209 a
7210 quadratic
7211 polynomial
7212 to
7213 the
7214 starting
7215 value
7216 given
7217 by
7218 the
7219 original
7220 hash
7221 computation
7222 Double
7223 hashing
7224 in
7225 which
7226 the
7227 interval
7228 between
7229 probes
7230 is
7231 computed
7232 by
7233 another
7234 hash
7235 function
7236 A
7237 drawback
7238 of
7239 all
7240 these
7241 open
7242 addressing
7243 schemes
7244 is
7245 that
7246 the
7247 number
7248 of
7249 stored
7250 entries
7251 cannot
7252 exceed
7253 the
7254 number
7255 of
7256 slots
7257 in
7258 the
7259 bucket
7260 array
7261 In
7262 fact
7263 even
7264 with
7265 good
7266 hash
7267 functions
7268 their
7269 performance
7270 dramatically
7271 degrades
7272 when
7273 the
7274 load
7275 factor
7276 grows
7277 beyond
7278 07
7279 or
7280 so
7281 For
7282 many
7283 applications
7284 these
7285 restrictions
7286 mandate
7287 the
7288 use
7289 of
7290 dynamic
7291 resizing
7292 with
7293 its
7294 attendant
7295 costs
7296 Open
7297 addressing
7298 schemes
7299 also
7300 put
7301 more
7302 stringent
7303 requirements
7304 on
7305 the
7306 hash
7307 function
7308 besides
7309 distributing
7310 the
7311 keys
7312 more
7313 uniformly
7314 over
7315 the
7316 buckets
7317 the
7318 function
7319 must
7320 also
7321 minimize
7322 the
7323 clustering
7324 of
7325 hash
7326 values
7327 that
7328 are
7329 consecutive
7330 in
7331 the
7332 probe
7333 order
7334 Using
7335 separate
7336 chaining
7337 the
7338 only
7339 concern
7340 is
7341 that
7342 too
7343 many
7344 objects
7345 map
7346 to
7347 the
7348 same
7349 hash
7350 value
7351 whether
7352 they
7353 are
7354 adjacent
7355 or
7356 nearby
7357 is
7358 completely
7359 irrelevant
7360 Open
7361 addressing
7362 only
7363 saves
7364 memory
7365 if
7366 the
7367 entries
7368 are
7369 small
7370 less
7371 than
7372 four
7373 times
7374 the
7375 size
7376 of
7377 a
7378 pointer
7379 and
7380 the
7381 load
7382 factor
7383 is
7384 not
7385 too
7386 small
7387 If
7388 the
7389 load
7390 factor
7391 is
7392 close
7393 to
7394 zero
7395 that
7396 is
7397 there
7398 are
7399 far
7400 more
7401 buckets
7402 than
7403 stored
7404 entries
7405 open
7406 addressing
7407 is
7408 wasteful
7409 even
7410 if
7411 each
7412 entry
7413 is
7414 just
7415 two
7416 words
7417 This
7418 graph
7419 compares
7420 the
7421 average
7422 number
7423 of
7424 cache
7425 misses
7426 required
7427 to
7428 look
7429 up
7430 elements
7431 in
7432 tables
7433 with
7434 chaining
7435 and
7436 linear
7437 probing
7438 As
7439 the
7440 table
7441 passes
7442 the
7443 80
7444 full
7445 mark
7446 linear
7447 probings
7448 performance
7449 drastically
7450 degrades
7451 Open
7452 addressing
7453 avoids
7454 the
7455 time
7456 overhead
7457 of
7458 allocating
7459 each
7460 new
7461 entry
7462 record
7463 and
7464 can
7465 be
7466 implemented
7467 even
7468 in
7469 the
7470 absence
7471 of
7472 a
7473 memory
7474 allocator
7475 It
7476 also
7477 avoids
7478 the
7479 extra
7480 indirection
7481 required
7482 to
7483 access
7484 the
7485 first
7486 entry
7487 of
7488 each
7489 bucket
7490 that
7491 is
7492 usually
7493 the
7494 only
7495 one
7496 It
7497 also
7498 has
7499 better
7500 locality
7501 of
7502 reference
7503 particularly
7504 with
7505 linear
7506 probing
7507 With
7508 small
7509 record
7510 sizes
7511 these
7512 factors
7513 can
7514 yield
7515 better
7516 performance
7517 than
7518 chaining
7519 particularly
7520 for
7521 lookups
7522 Hash
7523 tables
7524 with
7525 open
7526 addressing
7527 are
7528 also
7529 easier
7530 to
7531 serialize
7532 because
7533 they
7534 do
7535 not
7536 use
7537 pointers
7538 On
7539 the
7540 other
7541 hand
7542 normal
7543 open
7544 addressing
7545 is
7546 a
7547 poor
7548 choice
7549 for
7550 large
7551 elements
7552 because
7553 these
7554 elements
7555 fill
7556 entire
7557 CPU
7558 cache
7559 lines
7560 negating
7561 the
7562 cache
7563 advantage
7564 and
7565 a
7566 large
7567 amount
7568 of
7569 space
7570 is
7571 wasted
7572 on
7573 large
7574 empty
7575 table
7576 slots
7577 If
7578 the
7579 open
7580 addressing
7581 table
7582 only
7583 stores
7584 references
7585 to
7586 elements
7587 external
7588 storage
7589 it
7590 uses
7591 space
7592 comparable
7593 to
7594 chaining
7595 even
7596 for
7597 large
7598 records
7599 but
7600 loses
7601 its
7602 speed
7603 advantage
7604 Generally
7605 speaking
7606 open
7607 addressing
7608 is
7609 better
7610 used
7611 for
7612 hash
7613 tables
7614 with
7615 small
7616 records
7617 that
7618 can
7619 be
7620 stored
7621 within
7622 the
7623 table
7624 internal
7625 storage
7626 and
7627 fit
7628 in
7629 a
7630 cache
7631 line
7632 They
7633 are
7634 particularly
7635 suitable
7636 for
7637 elements
7638 of
7639 one
7640 word
7641 or
7642 less
7643 If
7644 the
7645 table
7646 is
7647 expected
7648 to
7649 have
7650 a
7651 high
7652 load
7653 factor
7654 the
7655 records
7656 are
7657 large
7658 or
7659 the
7660 data
7661 is
7662 variable
7663 sized
7664 chained
7665 hash
7666 tables
7667 often
7668 perform
7669 as
7670 well
7671 or
7672 better
7673 Ultimately
7674 used
7675 sensibly
7676 any
7677 kind
7678 of
7679 hash
7680 table
7681 algorithm
7682 is
7683 usually
7684 fast
7685 enough
7686 and
7687 the
7688 percentage
7689 of
7690 a
7691 calculation
7692 spent
7693 in
7694 hash
7695 table
7696 code
7697 is
7698 low
7699 Memory
7700 usage
7701 is
7702 rarely
7703 considered
7704 excessive
7705 Therefore
7706 in
7707 most
7708 cases
7709 the
7710 differences
7711 between
7712 these
7713 algorithms
7714 are
7715 marginal
7716 and
7717 other
7718 considerations
7719 typically
7720 come
7721 into
7722 play
7723 Coalesced
7724 hashing
7725 A
7726 hybrid
7727 of
7728 chaining
7729 and
7730 open
7731 addressing
7732 coalesced
7733 hashing
7734 links
7735 together
7736 chains
7737 of
7738 nodes
7739 within
7740 the
7741 table
7742 itself12
7743 Like
7744 open
7745 addressing
7746 it
7747 achieves
7748 space
7749 usage
7750 and
7751 somewhat
7752 diminished
7753 cache
7754 advantages
7755 over
7756 chaining
7757 Like
7758 chaining
7759 it
7760 does
7761 not
7762 exhibit
7763 clustering
7764 effects
7765 in
7766 fact
7767 the
7768 table
7769 can
7770 be
7771 efficiently
7772 filled
7773 to
7774 a
7775 high
7776 density
7777 Unlike
7778 chaining
7779 it
7780 cannot
7781 have
7782 more
7783 elements
7784 than
7785 table
7786 slots
7787 Cuckoo
7788 hashing
7789 Another
7790 alternative
7791 open
7792 addressing
7793 solution
7794 is
7795 cuckoo
7796 hashing
7797 which
7798 ensures
7799 constant
7800 lookup
7801 time
7802 in
7803 the
7804 worst
7805 case
7806 and
7807 constant
7808 amortized
7809 time
7810 for
7811 insertions
7812 and
7813 deletions
7814 It
7815 uses
7816 two
7817 or
7818 more
7819 hash
7820 functions
7821 which
7822 means
7823 any
7824 key
7825 value
7826 pair
7827 could
7828 be
7829 in
7830 two
7831 or
7832 more
7833 locations
7834 For
7835 lookup
7836 the
7837 first
7838 hash
7839 function
7840 is
7841 used
7842 if
7843 the
7844 key
7845 value
7846 is
7847 not
7848 found
7849 then
7850 the
7851 second
7852 hash
7853 function
7854 is
7855 used
7856 and
7857 so
7858 on
7859 If
7860 a
7861 collision
7862 happens
7863 during
7864 insertion
7865 then
7866 the
7867 key
7868 is
7869 re
7870 hashed
7871 with
7872 the
7873 second
7874 hash
7875 function
7876 to
7877 map
7878 it
7879 to
7880 another
7881 bucket
7882 If
7883 all
7884 hash
7885 functions
7886 are
7887 used
7888 and
7889 there
7890 is
7891 still
7892 a
7893 collision
7894 then
7895 the
7896 key
7897 it
7898 collided
7899 with
7900 is
7901 removed
7902 to
7903 make
7904 space
7905 for
7906 the
7907 new
7908 key
7909 and
7910 the
7911 old
7912 key
7913 is
7914 re
7915 hashed
7916 with
7917 one
7918 of
7919 the
7920 other
7921 hash
7922 functions
7923 which
7924 maps
7925 it
7926 to
7927 another
7928 bucket
7929 If
7930 that
7931 location
7932 also
7933 results
7934 in
7935 a
7936 collision
7937 then
7938 the
7939 process
7940 repeats
7941 until
7942 there
7943 is
7944 no
7945 collision
7946 or
7947 the
7948 process
7949 traverses
7950 all
7951 the
7952 buckets
7953 at
7954 which
7955 point
7956 the
7957 table
7958 is
7959 resized
7960 By
7961 combining
7962 multiple
7963 hash
7964 functions
7965 with
7966 multiple
7967 cells
7968 per
7969 bucket
7970 very
7971 high
7972 space
7973 utilisation
7974 can
7975 be
7976 achieved
7977 Hopscotch
7978 hashing
7979 Another
7980 alternative
7981 open
7982 addressing
7983 solution
7984 is
7985 hopscotch
7986 hashing
7987 13
7988 which
7989 combines
7990 the
7991 approaches
7992 of
7993 cuckoo
7994 hashing
7995 and
7996 linear
7997 probing
7998 yet
7999 seems
8000 in
8001 general
8002 to
8003 avoid
8004 their
8005 limitations
8006 In
8007 particular
8008 it
8009 works
8010 well
8011 even
8012 when
8013 the
8014 load
8015 factor
8016 grows
8017 beyond
8018 09
8019 The
8020 algorithm
8021 is
8022 well
8023 suited
8024 for
8025 implementing
8026 a
8027 resizable
8028 concurrent
8029 hash
8030 table
8031 The
8032 hopscotch
8033 hashing
8034 algorithm
8035 works
8036 by
8037 defining
8038 a
8039 neighborhood
8040 of
8041 buckets
8042 near
8043 the
8044 original
8045 hashed
8046 bucket
8047 where
8048 a
8049 given
8050 entry
8051 is
8052 always
8053 found
8054 Thus
8055 search
8056 is
8057 limited
8058 to
8059 the
8060 number
8061 of
8062 entries
8063 in
8064 this
8065 neighborhood
8066 which
8067 is
8068 logarithmic
8069 in
8070 the
8071 worst
8072 case
8073 constant
8074 on
8075 average
8076 and
8077 with
8078 proper
8079 alignment
8080 of
8081 the
8082 neighborhood
8083 typically
8084 requires
8085 one
8086 cache
8087 miss
8088 When
8089 inserting
8090 an
8091 entry
8092 one
8093 first
8094 attempts
8095 to
8096 add
8097 it
8098 to
8099 a
8100 bucket
8101 in
8102 the
8103 neighborhood
8104 However
8105 if
8106 all
8107 buckets
8108 in
8109 this
8110 neighborhood
8111 are
8112 occupied
8113 the
8114 algorithm
8115 traverses
8116 buckets
8117 in
8118 sequence
8119 until
8120 an
8121 open
8122 slot
8123 an
8124 unoccupied
8125 bucket
8126 is
8127 found
8128 as
8129 in
8130 linear
8131 probing
8132 At
8133 that
8134 point
8135 since
8136 the
8137 empty
8138 bucket
8139 is
8140 outside
8141 the
8142 neighborhood
8143 items
8144 are
8145 repeatedly
8146 displaced
8147 in
8148 a
8149 sequence
8150 of
8151 hops
8152 This
8153 is
8154 similar
8155 to
8156 cuckoo
8157 hashing
8158 but
8159 with
8160 the
8161 difference
8162 that
8163 in
8164 this
8165 case
8166 the
8167 empty
8168 slot
8169 is
8170 being
8171 moved
8172 into
8173 the
8174 neighborhood
8175 instead
8176 of
8177 items
8178 being
8179 moved
8180 out
8181 with
8182 the
8183 hope
8184 of
8185 eventually
8186 finding
8187 an
8188 empty
8189 slot
8190 Each
8191 hop
8192 brings
8193 the
8194 open
8195 slot
8196 closer
8197 to
8198 the
8199 original
8200 neighborhood
8201 without
8202 invalidating
8203 the
8204 neighborhood
8205 property
8206 of
8207 any
8208 of
8209 the
8210 buckets
8211 along
8212 the
8213 way
8214 In
8215 the
8216 end
8217 the
8218 open
8219 slot
8220 has
8221 been
8222 moved
8223 into
8224 the
8225 neighborhood
8226 and
8227 the
8228 entry
8229 being
8230 inserted
8231 can
8232 be
8233 added
8234 to
8235 it
8236 Robin
8237 Hood
8238 hashing
8239 One
8240 interesting
8241 variation
8242 on
8243 double
8244 hashing
8245 collision
8246 resolution
8247 is
8248 Robin
8249 Hood
8250 hashing1415
8251 The
8252 idea
8253 is
8254 that
8255 a
8256 new
8257 key
8258 may
8259 displace
8260 a
8261 key
8262 already
8263 inserted
8264 if
8265 its
8266 probe
8267 count
8268 is
8269 larger
8270 than
8271 that
8272 of
8273 the
8274 key
8275 at
8276 the
8277 current
8278 position
8279 The
8280 net
8281 effect
8282 of
8283 this
8284 is
8285 that
8286 it
8287 reduces
8288 worst
8289 case
8290 search
8291 times
8292 in
8293 the
8294 table
8295 This
8296 is
8297 similar
8298 to
8299 ordered
8300 hash
8301 tables16
8302 except
8303 that
8304 the
8305 criterion
8306 for
8307 bumping
8308 a
8309 key
8310 does
8311 not
8312 depend
8313 on
8314 a
8315 direct
8316 relationship
8317 between
8318 the
8319 keys
8320 Since
8321 both
8322 the
8323 worst
8324 case
8325 and
8326 the
8327 variation
8328 in
8329 the
8330 number
8331 of
8332 probes
8333 is
8334 reduced
8335 dramatically
8336 an
8337 interesting
8338 variation
8339 is
8340 to
8341 probe
8342 the
8343 table
8344 starting
8345 at
8346 the
8347 expected
8348 successful
8349 probe
8350 value
8351 and
8352 then
8353 expand
8354 from
8355 that
8356 position
8357 in
8358 both
8359 directions17
8360 External
8361 Robin
8362 Hashing
8363 is
8364 an
8365 extension
8366 of
8367 this
8368 algorithm
8369 where
8370 the
8371 table
8372 is
8373 stored
8374 in
8375 an
8376 external
8377 file
8378 and
8379 each
8380 table
8381 position
8382 corresponds
8383 to
8384 a
8385 fixed
8386 sized
8387 page
8388 or
8389 bucket
8390 with
8391 B
8392 records18
8393 2
8394 choice
8395 hashing
8396 2
8397 choice
8398 hashing
8399 employs
8400 2
8401 different
8402 hash
8403 functions
8404 h1x
8405 and
8406 h2x
8407 for
8408 the
8409 hash
8410 table
8411 Both
8412 hash
8413 functions
8414 are
8415 used
8416 to
8417 compute
8418 two
8419 table
8420 locations
8421 When
8422 an
8423 object
8424 is
8425 inserted
8426 in
8427 the
8428 table
8429 then
8430 it
8431 is
8432 placed
8433 in
8434 the
8435 table
8436 location
8437 that
8438 contains
8439 fewer
8440 objects
8441 with
8442 the
8443 default
8444 being
8445 the
8446 h1x
8447 table
8448 location
8449 if
8450 there
8451 is
8452 equality
8453 in
8454 bucket
8455 size
8456 2
8457 choice
8458 hashing
8459 employs
8460 the
8461 principle
8462 of
8463 the
8464 power
8465 of
8466 two
8467 choices19
8468 Dynamic
8469 resizing
8470 The
8471 good
8472 functioning
8473 of
8474 a
8475 hash
8476 table
8477 depends
8478 on
8479 the
8480 fact
8481 that
8482 the
8483 table
8484 size
8485 is
8486 proportional
8487 to
8488 the
8489 number
8490 of
8491 entries
8492 With
8493 a
8494 fixed
8495 size
8496 and
8497 the
8498 common
8499 structures
8500 it
8501 is
8502 similar
8503 to
8504 linear
8505 search
8506 except
8507 with
8508 a
8509 better
8510 constant
8511 factor
8512 In
8513 some
8514 cases
8515 the
8516 number
8517 of
8518 entries
8519 may
8520 be
8521 definitely
8522 known
8523 in
8524 advance
8525 for
8526 example
8527 keywords
8528 in
8529 a
8530 language
8531 More
8532 commonly
8533 this
8534 is
8535 not
8536 known
8537 for
8538 sure
8539 if
8540 only
8541 due
8542 to
8543 later
8544 changes
8545 in
8546 code
8547 and
8548 data
8549 It
8550 is
8551 one
8552 serious
8553 although
8554 common
8555 mistake
8556 to
8557 not
8558 provide
8559 any
8560 way
8561 for
8562 the
8563 table
8564 to
8565 resize
8566 A
8567 general
8568 purpose
8569 hash
8570 table
8571 class
8572 will
8573 almost
8574 always
8575 have
8576 some
8577 way
8578 to
8579 resize
8580 and
8581 it
8582 is
8583 good
8584 practice
8585 even
8586 for
8587 simple
8588 custom
8589 tables
8590 An
8591 implementation
8592 should
8593 check
8594 the
8595 load
8596 factor
8597 and
8598 do
8599 something
8600 if
8601 it
8602 becomes
8603 too
8604 large
8605 this
8606 needs
8607 to
8608 be
8609 done
8610 only
8611 on
8612 inserts
8613 since
8614 that
8615 is
8616 the
8617 only
8618 thing
8619 that
8620 would
8621 increase
8622 it
8623 To
8624 keep
8625 the
8626 load
8627 factor
8628 under
8629 a
8630 certain
8631 limit
8632 eg
8633 under
8634 3
8635 4
8636 many
8637 table
8638 implementations
8639 expand
8640 the
8641 table
8642 when
8643 items
8644 are
8645 inserted
8646 For
8647 example
8648 in
8649 Javas
8650 HashMap
8651 class
8652 the
8653 default
8654 load
8655 factor
8656 threshold
8657 for
8658 table
8659 expansion
8660 is
8661 075
8662 and
8663 in
8664 Pythons
8665 dict
8666 table
8667 size
8668 is
8669 resized
8670 when
8671 load
8672 factor
8673 is
8674 greater
8675 than
8676 2
8677 3
8678 Since
8679 buckets
8680 are
8681 usually
8682 implemented
8683 on
8684 top
8685 of
8686 a
8687 dynamic
8688 array
8689 and
8690 any
8691 constant
8692 proportion
8693 for
8694 resizing
8695 greater
8696 than
8697 1
8698 will
8699 keep
8700 the
8701 load
8702 factor
8703 under
8704 the
8705 desired
8706 limit
8707 the
8708 exact
8709 choice
8710 of
8711 the
8712 constant
8713 is
8714 determined
8715 by
8716 the
8717 same
8718 space
8719 time
8720 tradeoff
8721 as
8722 for
8723 dynamic
8724 arrays
8725 Resizing
8726 is
8727 accompanied
8728 by
8729 a
8730 full
8731 or
8732 incremental
8733 table
8734 rehash
8735 whereby
8736 existing
8737 items
8738 are
8739 mapped
8740 to
8741 new
8742 bucket
8743 locations
8744 To
8745 limit
8746 the
8747 proportion
8748 of
8749 memory
8750 wasted
8751 due
8752 to
8753 empty
8754 buckets
8755 some
8756 implementations
8757 also
8758 shrink
8759 the
8760 size
8761 of
8762 the
8763 table
8764 followed
8765 by
8766 a
8767 rehash
8768 when
8769 items
8770 are
8771 deleted
8772 From
8773 the
8774 point
8775 of
8776 space
8777 time
8778 tradeoffs
8779 this
8780 operation
8781 is
8782 similar
8783 to
8784 the
8785 deallocation
8786 in
8787 dynamic
8788 arrays
8789 Resizing
8790 by
8791 copying
8792 all
8793 entries
8794 A
8795 common
8796 approach
8797 is
8798 to
8799 automatically
8800 trigger
8801 a
8802 complete
8803 resizing
8804 when
8805 the
8806 load
8807 factor
8808 exceeds
8809 some
8810 threshold
8811 rmax
8812 Then
8813 a
8814 new
8815 larger
8816 table
8817 is
8818 allocated
8819 all
8820 the
8821 entries
8822 of
8823 the
8824 old
8825 table
8826 are
8827 removed
8828 and
8829 inserted
8830 into
8831 this
8832 new
8833 table
8834 and
8835 the
8836 old
8837 table
8838 is
8839 returned
8840 to
8841 the
8842 free
8843 storage
8844 pool
8845 Symmetrically
8846 when
8847 the
8848 load
8849 factor
8850 falls
8851 below
8852 a
8853 second
8854 threshold
8855 rmin
8856 all
8857 entries
8858 are
8859 moved
8860 to
8861 a
8862 new
8863 smaller
8864 table
8865 If
8866 the
8867 table
8868 size
8869 increases
8870 or
8871 decreases
8872 by
8873 a
8874 fixed
8875 percentage
8876 at
8877 each
8878 expansion
8879 the
8880 total
8881 cost
8882 of
8883 these
8884 resizings
8885 amortized
8886 over
8887 all
8888 insert
8889 and
8890 delete
8891 operations
8892 is
8893 still
8894 a
8895 constant
8896 independent
8897 of
8898 the
8899 number
8900 of
8901 entries
8902 n
8903 and
8904 of
8905 the
8906 number
8907 m
8908 of
8909 operations
8910 performed
8911 For
8912 example
8913 consider
8914 a
8915 table
8916 that
8917 was
8918 created
8919 with
8920 the
8921 minimum
8922 possible
8923 size
8924 and
8925 is
8926 doubled
8927 each
8928 time
8929 the
8930 load
8931 ratio
8932 exceeds
8933 some
8934 threshold
8935 If
8936 m
8937 elements
8938 are
8939 inserted
8940 into
8941 that
8942 table
8943 the
8944 total
8945 number
8946 of
8947 extra
8948 re
8949 insertions
8950 that
8951 occur
8952 in
8953 all
8954 dynamic
8955 resizings
8956 of
8957 the
8958 table
8959 is
8960 at
8961 most
8962 m
8963 1
8964 In
8965 other
8966 words
8967 dynamic
8968 resizing
8969 roughly
8970 doubles
8971 the
8972 cost
8973 of
8974 each
8975 insert
8976 or
8977 delete
8978 operation
8979 Incremental
8980 resizing
8981 Some
8982 hash
8983 table
8984 implementations
8985 notably
8986 in
8987 real
8988 time
8989 systems
8990 cannot
8991 pay
8992 the
8993 price
8994 of
8995 enlarging
8996 the
8997 hash
8998 table
8999 all
9000 at
9001 once
9002 because
9003 it
9004 may
9005 interrupt
9006 time
9007 critical
9008 operations
9009 If
9010 one
9011 cannot
9012 avoid
9013 dynamic
9014 resizing
9015 a
9016 solution
9017 is
9018 to
9019 perform
9020 the
9021 resizing
9022 gradually
9023 During
9024 the
9025 resize
9026 allocate
9027 the
9028 new
9029 hash
9030 table
9031 but
9032 keep
9033 the
9034 old
9035 table
9036 unchanged
9037 In
9038 each
9039 lookup
9040 or
9041 delete
9042 operation
9043 check
9044 both
9045 tables
9046 Perform
9047 insertion
9048 operations
9049 only
9050 in
9051 the
9052 new
9053 table
9054 At
9055 each
9056 insertion
9057 also
9058 move
9059 r
9060 elements
9061 from
9062 the
9063 old
9064 table
9065 to
9066 the
9067 new
9068 table
9069 When
9070 all
9071 elements
9072 are
9073 removed
9074 from
9075 the
9076 old
9077 table
9078 deallocate
9079 it
9080 To
9081 ensure
9082 that
9083 the
9084 old
9085 table
9086 is
9087 completely
9088 copied
9089 over
9090 before
9091 the
9092 new
9093 table
9094 itself
9095 needs
9096 to
9097 be
9098 enlarged
9099 it
9100 is
9101 necessary
9102 to
9103 increase
9104 the
9105 size
9106 of
9107 the
9108 table
9109 by
9110 a
9111 factor
9112 of
9113 at
9114 least
9115 r
9116 1
9117 r
9118 during
9119 resizing
9120 Monotonic
9121 keys
9122 If
9123 it
9124 is
9125 known
9126 that
9127 key
9128 values
9129 will
9130 always
9131 increase
9132 or
9133 decrease
9134 monotonically
9135 then
9136 a
9137 variation
9138 of
9139 consistent
9140 hashing
9141 can
9142 be
9143 achieved
9144 by
9145 keeping
9146 a
9147 list
9148 of
9149 the
9150 single
9151 most
9152 recent
9153 key
9154 value
9155 at
9156 each
9157 hash
9158 table
9159 resize
9160 operation
9161 Upon
9162 lookup
9163 keys
9164 that
9165 fall
9166 in
9167 the
9168 ranges
9169 defined
9170 by
9171 these
9172 list
9173 entries
9174 are
9175 directed
9176 to
9177 the
9178 appropriate
9179 hash
9180 function
9181 and
9182 indeed
9183 hash
9184 table
9185 both
9186 of
9187 which
9188 can
9189 be
9190 different
9191 for
9192 each
9193 range
9194 Since
9195 it
9196 is
9197 common
9198 to
9199 grow
9200 the
9201 overall
9202 number
9203 of
9204 entries
9205 by
9206 doubling
9207 there
9208 will
9209 only
9210 be
9211 OlgN
9212 ranges
9213 to
9214 check
9215 and
9216 binary
9217 search
9218 time
9219 for
9220 the
9221 redirection
9222 would
9223 be
9224 OlglgN
9225 As
9226 with
9227 consistent
9228 hashing
9229 this
9230 approach
9231 guarantees
9232 that
9233 any
9234 keys
9235 hash
9236 once
9237 issued
9238 will
9239 never
9240 change
9241 even
9242 when
9243 the
9244 hash
9245 table
9246 is
9247 later
9248 grown
9249 Other
9250 solutions
9251 Linear
9252 hashing20
9253 is
9254 a
9255 hash
9256 table
9257 algorithm
9258 that
9259 permits
9260 incremental
9261 hash
9262 table
9263 expansion
9264 It
9265 is
9266 implemented
9267 using
9268 a
9269 single
9270 hash
9271 table
9272 but
9273 with
9274 two
9275 possible
9276 look
9277 up
9278 functions
9279 Another
9280 way
9281 to
9282 decrease
9283 the
9284 cost
9285 of
9286 table
9287 resizing
9288 is
9289 to
9290 choose
9291 a
9292 hash
9293 function
9294 in
9295 such
9296 a
9297 way
9298 that
9299 the
9300 hashes
9301 of
9302 most
9303 values
9304 do
9305 not
9306 change
9307 when
9308 the
9309 table
9310 is
9311 resized
9312 This
9313 approach
9314 called
9315 consistent
9316 hashing
9317 is
9318 prevalent
9319 in
9320 disk
9321 based
9322 and
9323 distributed
9324 hashes
9325 where
9326 rehashing
9327 is
9328 prohibitively
9329 costly
9330 Performance
9331 analysis
9332 In
9333 the
9334 simplest
9335 model
9336 the
9337 hash
9338 function
9339 is
9340 completely
9341 unspecified
9342 and
9343 the
9344 table
9345 does
9346 not
9347 resize
9348 For
9349 the
9350 best
9351 possible
9352 choice
9353 of
9354 hash
9355 function
9356 a
9357 table
9358 of
9359 size
9360 k
9361 with
9362 open
9363 addressing
9364 has
9365 no
9366 collisions
9367 and
9368 holds
9369 up
9370 to
9371 k
9372 elements
9373 with
9374 a
9375 single
9376 comparison
9377 for
9378 successful
9379 lookup
9380 and
9381 a
9382 table
9383 of
9384 size
9385 k
9386 with
9387 chaining
9388 and
9389 n
9390 keys
9391 has
9392 the
9393 minimum
9394 max0
9395 n
9396 k
9397 collisions
9398 and
9399 O1
9400 n
9401 k
9402 comparisons
9403 for
9404 lookup
9405 For
9406 the
9407 worst
9408 choice
9409 of
9410 hash
9411 function
9412 every
9413 insertion
9414 causes
9415 a
9416 collision
9417 and
9418 hash
9419 tables
9420 degenerate
9421 to
9422 linear
9423 search
9424 with
9425 Ωn
9426 amortized
9427 comparisons
9428 per
9429 insertion
9430 and
9431 up
9432 to
9433 n
9434 comparisons
9435 for
9436 a
9437 successful
9438 lookup
9439 Adding
9440 rehashing
9441 to
9442 this
9443 model
9444 is
9445 straightforward
9446 As
9447 in
9448 a
9449 dynamic
9450 array
9451 geometric
9452 resizing
9453 by
9454 a
9455 factor
9456 of
9457 b
9458 implies
9459 that
9460 only
9461 n
9462 bi
9463 keys
9464 are
9465 inserted
9466 i
9467 or
9468 more
9469 times
9470 so
9471 that
9472 the
9473 total
9474 number
9475 of
9476 insertions
9477 is
9478 bounded
9479 above
9480 by
9481 bn
9482 b
9483 1
9484 which
9485 is
9486 On
9487 By
9488 using
9489 rehashing
9490 to
9491 maintain
9492 n
9493 k
9494 tables
9495 using
9496 both
9497 chaining
9498 and
9499 open
9500 addressing
9501 can
9502 have
9503 unlimited
9504 elements
9505 and
9506 perform
9507 successful
9508 lookup
9509 in
9510 a
9511 single
9512 comparison
9513 for
9514 the
9515 best
9516 choice
9517 of
9518 hash
9519 function
9520 In
9521 more
9522 realistic
9523 models
9524 the
9525 hash
9526 function
9527 is
9528 a
9529 random
9530 variable
9531 over
9532 a
9533 probability
9534 distribution
9535 of
9536 hash
9537 functions
9538 and
9539 performance
9540 is
9541 computed
9542 on
9543 average
9544 over
9545 the
9546 choice
9547 of
9548 hash
9549 function
9550 When
9551 this
9552 distribution
9553 is
9554 uniform
9555 the
9556 assumption
9557 is
9558 called
9559 simple
9560 uniform
9561 hashing
9562 and
9563 it
9564 can
9565 be
9566 shown
9567 that
9568 hashing
9569 with
9570 chaining
9571 requires
9572 Θ1
9573 n
9574 k
9575 comparisons
9576 on
9577 average
9578 for
9579 an
9580 unsuccessful
9581 lookup
9582 and
9583 hashing
9584 with
9585 open
9586 addressing
9587 requires
9588 Θ1
9589 1
9590 n
9591 k21
9592 Both
9593 these
9594 bounds
9595 are
9596 constant
9597 if
9598 we
9599 maintain
9600 n
9601 k
9602 c
9603 using
9604 table
9605 resizing
9606 where
9607 c
9608 is
9609 a
9610 fixed
9611 constant
9612 less
9613 than
9614 1
9615 Features
9616 Advantages
9617 The
9618 main
9619 advantage
9620 of
9621 hash
9622 tables
9623 over
9624 other
9625 table
9626 data
9627 structures
9628 is
9629 speed
9630 This
9631 advantage
9632 is
9633 more
9634 apparent
9635 when
9636 the
9637 number
9638 of
9639 entries
9640 is
9641 large
9642 Hash
9643 tables
9644 are
9645 particularly
9646 efficient
9647 when
9648 the
9649 maximum
9650 number
9651 of
9652 entries
9653 can
9654 be
9655 predicted
9656 in
9657 advance
9658 so
9659 that
9660 the
9661 bucket
9662 array
9663 can
9664 be
9665 allocated
9666 once
9667 with
9668 the
9669 optimum
9670 size
9671 and
9672 never
9673 resized
9674 If
9675 the
9676 set
9677 of
9678 key
9679 value
9680 pairs
9681 is
9682 fixed
9683 and
9684 known
9685 ahead
9686 of
9687 time
9688 so
9689 insertions
9690 and
9691 deletions
9692 are
9693 not
9694 allowed
9695 one
9696 may
9697 reduce
9698 the
9699 average
9700 lookup
9701 cost
9702 by
9703 a
9704 careful
9705 choice
9706 of
9707 the
9708 hash
9709 function
9710 bucket
9711 table
9712 size
9713 and
9714 internal
9715 data
9716 structures
9717 In
9718 particular
9719 one
9720 may
9721 be
9722 able
9723 to
9724 devise
9725 a
9726 hash
9727 function
9728 that
9729 is
9730 collision
9731 free
9732 or
9733 even
9734 perfect
9735 see
9736 below
9737 In
9738 this
9739 case
9740 the
9741 keys
9742 need
9743 not
9744 be
9745 stored
9746 in
9747 the
9748 table
9749 Drawbacks
9750 Although
9751 operations
9752 on
9753 a
9754 hash
9755 table
9756 take
9757 constant
9758 time
9759 on
9760 average
9761 the
9762 cost
9763 of
9764 a
9765 good
9766 hash
9767 function
9768 can
9769 be
9770 significantly
9771 higher
9772 than
9773 the
9774 inner
9775 loop
9776 of
9777 the
9778 lookup
9779 algorithm
9780 for
9781 a
9782 sequential
9783 list
9784 or
9785 search
9786 tree
9787 Thus
9788 hash
9789 tables
9790 are
9791 not
9792 effective
9793 when
9794 the
9795 number
9796 of
9797 entries
9798 is
9799 very
9800 small
9801 However
9802 in
9803 some
9804 cases
9805 the
9806 high
9807 cost
9808 of
9809 computing
9810 the
9811 hash
9812 function
9813 can
9814 be
9815 mitigated
9816 by
9817 saving
9818 the
9819 hash
9820 value
9821 together
9822 with
9823 the
9824 key
9825 For
9826 certain
9827 string
9828 processing
9829 applications
9830 such
9831 as
9832 spell
9833 checking
9834 hash
9835 tables
9836 may
9837 be
9838 less
9839 efficient
9840 than
9841 tries
9842 finite
9843 automata
9844 or
9845 Judy
9846 arrays
9847 Also
9848 if
9849 each
9850 key
9851 is
9852 represented
9853 by
9854 a
9855 small
9856 enough
9857 number
9858 of
9859 bits
9860 then
9861 instead
9862 of
9863 a
9864 hash
9865 table
9866 one
9867 may
9868 use
9869 the
9870 key
9871 directly
9872 as
9873 the
9874 index
9875 into
9876 an
9877 array
9878 of
9879 values
9880 Note
9881 that
9882 there
9883 are
9884 no
9885 collisions
9886 in
9887 this
9888 case
9889 The
9890 entries
9891 stored
9892 in
9893 a
9894 hash
9895 table
9896 can
9897 be
9898 enumerated
9899 efficiently
9900 at
9901 constant
9902 cost
9903 per
9904 entry
9905 but
9906 only
9907 in
9908 some
9909 pseudo
9910 random
9911 order
9912 Therefore
9913 there
9914 is
9915 no
9916 efficient
9917 way
9918 to
9919 locate
9920 an
9921 entry
9922 whose
9923 key
9924 is
9925 nearest
9926 to
9927 a
9928 given
9929 key
9930 Listing
9931 all
9932 n
9933 entries
9934 in
9935 some
9936 specific
9937 order
9938 generally
9939 requires
9940 a
9941 separate
9942 sorting
9943 step
9944 whose
9945 cost
9946 is
9947 proportional
9948 to
9949 logn
9950 per
9951 entry
9952 In
9953 comparison
9954 ordered
9955 search
9956 trees
9957 have
9958 lookup
9959 and
9960 insertion
9961 cost
9962 proportional
9963 to
9964 logn
9965 but
9966 allow
9967 finding
9968 the
9969 nearest
9970 key
9971 at
9972 about
9973 the
9974 same
9975 cost
9976 and
9977 ordered
9978 enumeration
9979 of
9980 all
9981 entries
9982 at
9983 constant
9984 cost
9985 per
9986 entry
9987 If
9988 the
9989 keys
9990 are
9991 not
9992 stored
9993 because
9994 the
9995 hash
9996 function
9997 is
9998 collision
9999 free
