0 has
1 guaranteed
2 constant
3 worst
4 case
5 lookup
6 time
7 and
8 low
9 amortized
10 time
11 for
12 insertion
13 Open
14 addressing
15 Hash
16 collision
17 resolved
18 by
19 open
20 addressing
21 with
22 linear
23 probing
24 interval
25 1
26 Note
27 that
28 Ted
29 Baker
30 has
31 a
32 unique
33 hash
34 but
35 nevertheless
36 collided
37 with
38 Sandra
39 Dee
40 that
41 had
42 previously
43 collided
44 with
45 John
46 Smith
47 In
48 another
49 strategy
50 called
51 open
52 addressing
53 all
54 entry
55 records
56 are
57 stored
58 in
59 the
60 bucket
61 array
62 itself
63 When
64 a
65 new
66 entry
67 has
68 to
69 be
70 inserted
71 the
72 buckets
73 are
74 examined
75 starting
76 with
77 the
78 hashed
79 to
80 slot
81 and
82 proceeding
83 in
84 some
85 probe
86 sequence
87 until
88 an
89 unoccupied
90 slot
91 is
92 found
93 When
94 searching
95 for
96 an
97 entry
98 the
99 buckets
100 are
101 scanned
102 in
103 the
104 same
105 sequence
106 until
107 either
108 the
109 target
110 record
111 is
112 found
113 or
114 an
115 unused
116 array
117 slot
118 is
119 found
120 which
121 indicates
122 that
123 there
124 is
125 no
126 such
127 key
128 in
129 the
130 table12
131 The
132 name
133 open
134 addressing
135 refers
136 to
137 the
138 fact
139 that
140 the
141 location
142 address
143 of
144 the
145 item
146 is
147 not
148 determined
149 by
150 its
151 hash
152 value
153 This
154 method
155 is
156 also
157 called
158 closed
159 hashing
160 it
161 should
162 not
163 be
164 confused
165 with
166 open
167 hashing
168 or
169 closed
170 addressing
171 that
172 usually
173 mean
174 separate
175 chaining
176 Well
177 known
178 probe
179 sequences
180 include
181 Linear
182 probing
183 in
184 which
185 the
186 interval
187 between
188 probes
189 is
190 fixed
191 usually
192 1
193 Quadratic
194 probing
195 in
196 which
197 the
198 interval
199 between
200 probes
201 is
202 increased
203 by
204 adding
205 the
206 successive
207 outputs
208 of
209 a
210 quadratic
211 polynomial
212 to
213 the
214 starting
215 value
216 given
217 by
218 the
219 original
220 hash
221 computation
222 Double
223 hashing
224 in
225 which
226 the
227 interval
228 between
229 probes
230 is
231 computed
232 by
233 another
234 hash
235 function
236 A
237 drawback
238 of
239 all
240 these
241 open
242 addressing
243 schemes
244 is
245 that
246 the
247 number
248 of
249 stored
250 entries
251 cannot
252 exceed
253 the
254 number
255 of
256 slots
257 in
258 the
259 bucket
260 array
261 In
262 fact
263 even
264 with
265 good
266 hash
267 functions
268 their
269 performance
270 dramatically
271 degrades
272 when
273 the
274 load
275 factor
276 grows
277 beyond
278 07
279 or
280 so
281 For
282 many
283 applications
284 these
285 restrictions
286 mandate
287 the
288 use
289 of
290 dynamic
291 resizing
292 with
293 its
294 attendant
295 costs
296 Open
297 addressing
298 schemes
299 also
300 put
301 more
302 stringent
303 requirements
304 on
305 the
306 hash
307 function
308 besides
309 distributing
310 the
311 keys
312 more
313 uniformly
314 over
315 the
316 buckets
317 the
318 function
319 must
320 also
321 minimize
322 the
323 clustering
324 of
325 hash
326 values
327 that
328 are
329 consecutive
330 in
331 the
332 probe
333 order
334 Using
335 separate
336 chaining
337 the
338 only
339 concern
340 is
341 that
342 too
343 many
344 objects
345 map
346 to
347 the
348 same
349 hash
350 value
351 whether
352 they
353 are
354 adjacent
355 or
356 nearby
357 is
358 completely
359 irrelevant
360 Open
361 addressing
362 only
363 saves
364 memory
365 if
366 the
367 entries
368 are
369 small
370 less
371 than
372 four
373 times
374 the
375 size
376 of
377 a
378 pointer
379 and
380 the
381 load
382 factor
383 is
384 not
385 too
386 small
387 If
388 the
389 load
390 factor
391 is
392 close
393 to
394 zero
395 that
396 is
397 there
398 are
399 far
400 more
401 buckets
402 than
403 stored
404 entries
405 open
406 addressing
407 is
408 wasteful
409 even
410 if
411 each
412 entry
413 is
414 just
415 two
416 words
417 This
418 graph
419 compares
420 the
421 average
422 number
423 of
424 cache
425 misses
426 required
427 to
428 look
429 up
430 elements
431 in
432 tables
433 with
434 chaining
435 and
436 linear
437 probing
438 As
439 the
440 table
441 passes
442 the
443 80
444 full
445 mark
446 linear
447 probings
448 performance
449 drastically
450 degrades
451 Open
452 addressing
453 avoids
454 the
455 time
456 overhead
457 of
458 allocating
459 each
460 new
461 entry
462 record
463 and
464 can
465 be
466 implemented
467 even
468 in
469 the
470 absence
471 of
472 a
473 memory
474 allocator
475 It
476 also
477 avoids
478 the
479 extra
480 indirection
481 required
482 to
483 access
484 the
485 first
486 entry
487 of
488 each
489 bucket
490 that
491 is
492 usually
493 the
494 only
495 one
496 It
497 also
498 has
499 better
500 locality
501 of
502 reference
503 particularly
504 with
505 linear
506 probing
507 With
508 small
509 record
510 sizes
511 these
512 factors
513 can
514 yield
515 better
516 performance
517 than
518 chaining
519 particularly
520 for
521 lookups
522 Hash
523 tables
524 with
525 open
526 addressing
527 are
528 also
529 easier
530 to
531 serialize
532 because
533 they
534 do
535 not
536 use
537 pointers
538 On
539 the
540 other
541 hand
542 normal
543 open
544 addressing
545 is
546 a
547 poor
548 choice
549 for
550 large
551 elements
552 because
553 these
554 elements
555 fill
556 entire
557 CPU
558 cache
559 lines
560 negating
561 the
562 cache
563 advantage
564 and
565 a
566 large
567 amount
568 of
569 space
570 is
571 wasted
572 on
573 large
574 empty
575 table
576 slots
577 If
578 the
579 open
580 addressing
581 table
582 only
583 stores
584 references
585 to
586 elements
587 external
588 storage
589 it
590 uses
591 space
592 comparable
593 to
594 chaining
595 even
596 for
597 large
598 records
599 but
600 loses
601 its
602 speed
603 advantage
604 Generally
605 speaking
606 open
607 addressing
608 is
609 better
610 used
611 for
612 hash
613 tables
614 with
615 small
616 records
617 that
618 can
619 be
620 stored
621 within
622 the
623 table
624 internal
625 storage
626 and
627 fit
628 in
629 a
630 cache
631 line
632 They
633 are
634 particularly
635 suitable
636 for
637 elements
638 of
639 one
640 word
641 or
642 less
643 If
644 the
645 table
646 is
647 expected
648 to
649 have
650 a
651 high
652 load
653 factor
654 the
655 records
656 are
657 large
658 or
659 the
660 data
661 is
662 variable
663 sized
664 chained
665 hash
666 tables
667 often
668 perform
669 as
670 well
671 or
672 better
673 Ultimately
674 used
675 sensibly
676 any
677 kind
678 of
679 hash
680 table
681 algorithm
682 is
683 usually
684 fast
685 enough
686 and
687 the
688 percentage
689 of
690 a
691 calculation
692 spent
693 in
694 hash
695 table
696 code
697 is
698 low
699 Memory
700 usage
701 is
702 rarely
703 considered
704 excessive
705 Therefore
706 in
707 most
708 cases
709 the
710 differences
711 between
712 these
713 algorithms
714 are
715 marginal
716 and
717 other
718 considerations
719 typically
720 come
721 into
722 play
723 Coalesced
724 hashing
725 A
726 hybrid
727 of
728 chaining
729 and
730 open
731 addressing
732 coalesced
733 hashing
734 links
735 together
736 chains
737 of
738 nodes
739 within
740 the
741 table
742 itself12
743 Like
744 open
745 addressing
746 it
747 achieves
748 space
749 usage
750 and
751 somewhat
752 diminished
753 cache
754 advantages
755 over
756 chaining
757 Like
758 chaining
759 it
760 does
761 not
762 exhibit
763 clustering
764 effects
765 in
766 fact
767 the
768 table
769 can
770 be
771 efficiently
772 filled
773 to
774 a
775 high
776 density
777 Unlike
778 chaining
779 it
780 cannot
781 have
782 more
783 elements
784 than
785 table
786 slots
787 Cuckoo
788 hashing
789 Another
790 alternative
791 open
792 addressing
793 solution
794 is
795 cuckoo
796 hashing
797 which
798 ensures
799 constant
800 lookup
801 time
802 in
803 the
804 worst
805 case
806 and
807 constant
808 amortized
809 time
810 for
811 insertions
812 and
813 deletions
814 It
815 uses
816 two
817 or
818 more
819 hash
820 functions
821 which
822 means
823 any
824 key
825 value
826 pair
827 could
828 be
829 in
830 two
831 or
832 more
833 locations
834 For
835 lookup
836 the
837 first
838 hash
839 function
840 is
841 used
842 if
843 the
844 key
845 value
846 is
847 not
848 found
849 then
850 the
851 second
852 hash
853 function
854 is
855 used
856 and
857 so
858 on
859 If
860 a
861 collision
862 happens
863 during
864 insertion
865 then
866 the
867 key
868 is
869 re
870 hashed
871 with
872 the
873 second
874 hash
875 function
876 to
877 map
878 it
879 to
880 another
881 bucket
882 If
883 all
884 hash
885 functions
886 are
887 used
888 and
889 there
890 is
891 still
892 a
893 collision
894 then
895 the
896 key
897 it
898 collided
899 with
900 is
901 removed
902 to
903 make
904 space
905 for
906 the
907 new
908 key
909 and
910 the
911 old
912 key
913 is
914 re
915 hashed
916 with
917 one
918 of
919 the
920 other
921 hash
922 functions
923 which
924 maps
925 it
926 to
927 another
928 bucket
929 If
930 that
931 location
932 also
933 results
934 in
935 a
936 collision
937 then
938 the
939 process
940 repeats
941 until
942 there
943 is
944 no
945 collision
946 or
947 the
948 process
949 traverses
950 all
951 the
952 buckets
953 at
954 which
955 point
956 the
957 table
958 is
959 resized
960 By
961 combining
962 multiple
963 hash
964 functions
965 with
966 multiple
967 cells
968 per
969 bucket
970 very
971 high
972 space
973 utilisation
974 can
975 be
976 achieved
977 Hopscotch
978 hashing
979 Another
980 alternative
981 open
982 addressing
983 solution
984 is
985 hopscotch
986 hashing
987 13
988 which
989 combines
990 the
991 approaches
992 of
993 cuckoo
994 hashing
995 and
996 linear
997 probing
998 yet
999 seems
1000 in
1001 general
1002 to
1003 avoid
1004 their
1005 limitations
1006 In
1007 particular
1008 it
1009 works
1010 well
1011 even
1012 when
1013 the
1014 load
1015 factor
1016 grows
1017 beyond
1018 09
1019 The
1020 algorithm
1021 is
1022 well
1023 suited
1024 for
1025 implementing
1026 a
1027 resizable
1028 concurrent
1029 hash
1030 table
1031 The
1032 hopscotch
1033 hashing
1034 algorithm
1035 works
1036 by
1037 defining
1038 a
1039 neighborhood
1040 of
1041 buckets
1042 near
1043 the
1044 original
1045 hashed
1046 bucket
1047 where
1048 a
1049 given
1050 entry
1051 is
1052 always
1053 found
1054 Thus
1055 search
1056 is
1057 limited
1058 to
1059 the
1060 number
1061 of
1062 entries
1063 in
1064 this
1065 neighborhood
1066 which
1067 is
1068 logarithmic
1069 in
1070 the
1071 worst
1072 case
1073 constant
1074 on
1075 average
1076 and
1077 with
1078 proper
1079 alignment
1080 of
1081 the
1082 neighborhood
1083 typically
1084 requires
1085 one
1086 cache
1087 miss
1088 When
1089 inserting
1090 an
1091 entry
1092 one
1093 first
1094 attempts
1095 to
1096 add
1097 it
1098 to
1099 a
1100 bucket
1101 in
1102 the
1103 neighborhood
1104 However
1105 if
1106 all
1107 buckets
1108 in
1109 this
1110 neighborhood
1111 are
1112 occupied
1113 the
1114 algorithm
1115 traverses
1116 buckets
1117 in
1118 sequence
1119 until
1120 an
1121 open
1122 slot
1123 an
1124 unoccupied
1125 bucket
1126 is
1127 found
1128 as
1129 in
1130 linear
1131 probing
1132 At
1133 that
1134 point
1135 since
1136 the
1137 empty
1138 bucket
1139 is
1140 outside
1141 the
1142 neighborhood
1143 items
1144 are
1145 repeatedly
1146 displaced
1147 in
1148 a
1149 sequence
1150 of
1151 hops
1152 This
1153 is
1154 similar
1155 to
1156 cuckoo
1157 hashing
1158 but
1159 with
1160 the
1161 difference
1162 that
1163 in
1164 this
1165 case
1166 the
1167 empty
1168 slot
1169 is
1170 being
1171 moved
1172 into
1173 the
1174 neighborhood
1175 instead
1176 of
1177 items
1178 being
1179 moved
1180 out
1181 with
1182 the
1183 hope
1184 of
1185 eventually
1186 finding
1187 an
1188 empty
1189 slot
1190 Each
1191 hop
1192 brings
1193 the
1194 open
1195 slot
1196 closer
1197 to
1198 the
1199 original
1200 neighborhood
1201 without
1202 invalidating
1203 the
1204 neighborhood
1205 property
1206 of
1207 any
1208 of
1209 the
1210 buckets
1211 along
1212 the
1213 way
1214 In
1215 the
1216 end
1217 the
1218 open
1219 slot
1220 has
1221 been
1222 moved
1223 into
1224 the
1225 neighborhood
1226 and
1227 the
1228 entry
1229 being
1230 inserted
1231 can
1232 be
1233 added
1234 to
1235 it
1236 Robin
1237 Hood
1238 hashing
1239 One
1240 interesting
1241 variation
1242 on
1243 double
1244 hashing
1245 collision
1246 resolution
1247 is
1248 Robin
1249 Hood
1250 hashing1415
1251 The
1252 idea
1253 is
1254 that
1255 a
1256 new
1257 key
1258 may
1259 displace
1260 a
1261 key
1262 already
1263 inserted
1264 if
1265 its
1266 probe
1267 count
1268 is
1269 larger
1270 than
1271 that
1272 of
1273 the
1274 key
1275 at
1276 the
1277 current
1278 position
1279 The
1280 net
1281 effect
1282 of
1283 this
1284 is
1285 that
1286 it
1287 reduces
1288 worst
1289 case
1290 search
1291 times
1292 in
1293 the
1294 table
1295 This
1296 is
1297 similar
1298 to
1299 ordered
1300 hash
1301 tables16
1302 except
1303 that
1304 the
1305 criterion
1306 for
1307 bumping
1308 a
1309 key
1310 does
1311 not
1312 depend
1313 on
1314 a
1315 direct
1316 relationship
1317 between
1318 the
1319 keys
1320 Since
1321 both
1322 the
1323 worst
1324 case
1325 and
1326 the
1327 variation
1328 in
1329 the
1330 number
1331 of
1332 probes
1333 is
1334 reduced
1335 dramatically
1336 an
1337 interesting
1338 variation
1339 is
1340 to
1341 probe
1342 the
1343 table
1344 starting
1345 at
1346 the
1347 expected
1348 successful
1349 probe
1350 value
1351 and
1352 then
1353 expand
1354 from
1355 that
1356 position
1357 in
1358 both
1359 directions17
1360 External
1361 Robin
1362 Hashing
1363 is
1364 an
1365 extension
1366 of
1367 this
1368 algorithm
1369 where
1370 the
1371 table
1372 is
1373 stored
1374 in
1375 an
1376 external
1377 file
1378 and
1379 each
1380 table
1381 position
1382 corresponds
1383 to
1384 a
1385 fixed
1386 sized
1387 page
1388 or
1389 bucket
1390 with
1391 B
1392 records18
1393 2
1394 choice
1395 hashing
1396 2
1397 choice
1398 hashing
1399 employs
1400 2
1401 different
1402 hash
1403 functions
1404 h1x
1405 and
1406 h2x
1407 for
1408 the
1409 hash
1410 table
1411 Both
1412 hash
1413 functions
1414 are
1415 used
1416 to
1417 compute
1418 two
1419 table
1420 locations
1421 When
1422 an
1423 object
1424 is
1425 inserted
1426 in
1427 the
1428 table
1429 then
1430 it
1431 is
1432 placed
1433 in
1434 the
1435 table
1436 location
1437 that
1438 contains
1439 fewer
1440 objects
1441 with
1442 the
1443 default
1444 being
1445 the
1446 h1x
1447 table
1448 location
1449 if
1450 there
1451 is
1452 equality
1453 in
1454 bucket
1455 size
1456 2
1457 choice
1458 hashing
1459 employs
1460 the
1461 principle
1462 of
1463 the
1464 power
1465 of
1466 two
1467 choices19
1468 Dynamic
1469 resizing
1470 The
1471 good
1472 functioning
1473 of
1474 a
1475 hash
1476 table
1477 depends
1478 on
1479 the
1480 fact
1481 that
1482 the
1483 table
1484 size
1485 is
1486 proportional
1487 to
1488 the
1489 number
1490 of
1491 entries
1492 With
1493 a
1494 fixed
1495 size
1496 and
1497 the
1498 common
1499 structures
1500 it
1501 is
1502 similar
1503 to
1504 linear
1505 search
1506 except
1507 with
1508 a
1509 better
1510 constant
1511 factor
1512 In
1513 some
1514 cases
1515 the
1516 number
1517 of
1518 entries
1519 may
1520 be
1521 definitely
1522 known
1523 in
1524 advance
1525 for
1526 example
1527 keywords
1528 in
1529 a
1530 language
1531 More
1532 commonly
1533 this
1534 is
1535 not
1536 known
1537 for
1538 sure
1539 if
1540 only
1541 due
1542 to
1543 later
1544 changes
1545 in
1546 code
1547 and
1548 data
1549 It
1550 is
1551 one
1552 serious
1553 although
1554 common
1555 mistake
1556 to
1557 not
1558 provide
1559 any
1560 way
1561 for
1562 the
1563 table
1564 to
1565 resize
1566 A
1567 general
1568 purpose
1569 hash
1570 table
1571 class
1572 will
1573 almost
1574 always
1575 have
1576 some
1577 way
1578 to
1579 resize
1580 and
1581 it
1582 is
1583 good
1584 practice
1585 even
1586 for
1587 simple
1588 custom
1589 tables
1590 An
1591 implementation
1592 should
1593 check
1594 the
1595 load
1596 factor
1597 and
1598 do
1599 something
1600 if
1601 it
1602 becomes
1603 too
1604 large
1605 this
1606 needs
1607 to
1608 be
1609 done
1610 only
1611 on
1612 inserts
1613 since
1614 that
1615 is
1616 the
1617 only
1618 thing
1619 that
1620 would
1621 increase
1622 it
1623 To
1624 keep
1625 the
1626 load
1627 factor
1628 under
1629 a
1630 certain
1631 limit
1632 eg
1633 under
1634 3
1635 4
1636 many
1637 table
1638 implementations
1639 expand
1640 the
1641 table
1642 when
1643 items
1644 are
1645 inserted
1646 For
1647 example
1648 in
1649 Javas
1650 HashMap
1651 class
1652 the
1653 default
1654 load
1655 factor
1656 threshold
1657 for
1658 table
1659 expansion
1660 is
1661 075
1662 and
1663 in
1664 Pythons
1665 dict
1666 table
1667 size
1668 is
1669 resized
1670 when
1671 load
1672 factor
1673 is
1674 greater
1675 than
1676 2
1677 3
1678 Since
1679 buckets
1680 are
1681 usually
1682 implemented
1683 on
1684 top
1685 of
1686 a
1687 dynamic
1688 array
1689 and
1690 any
1691 constant
1692 proportion
1693 for
1694 resizing
1695 greater
1696 than
1697 1
1698 will
1699 keep
1700 the
1701 load
1702 factor
1703 under
1704 the
1705 desired
1706 limit
1707 the
1708 exact
1709 choice
1710 of
1711 the
1712 constant
1713 is
1714 determined
1715 by
1716 the
1717 same
1718 space
1719 time
1720 tradeoff
1721 as
1722 for
1723 dynamic
1724 arrays
1725 Resizing
1726 is
1727 accompanied
1728 by
1729 a
1730 full
1731 or
1732 incremental
1733 table
1734 rehash
1735 whereby
1736 existing
1737 items
1738 are
1739 mapped
1740 to
1741 new
1742 bucket
1743 locations
1744 To
1745 limit
1746 the
1747 proportion
1748 of
1749 memory
1750 wasted
1751 due
1752 to
1753 empty
1754 buckets
1755 some
1756 implementations
1757 also
1758 shrink
1759 the
1760 size
1761 of
1762 the
1763 table
1764 followed
1765 by
1766 a
1767 rehash
1768 when
1769 items
1770 are
1771 deleted
1772 From
1773 the
1774 point
1775 of
1776 space
1777 time
1778 tradeoffs
1779 this
1780 operation
1781 is
1782 similar
1783 to
1784 the
1785 deallocation
1786 in
1787 dynamic
1788 arrays
1789 Resizing
1790 by
1791 copying
1792 all
1793 entries
1794 A
1795 common
1796 approach
1797 is
1798 to
1799 automatically
1800 trigger
1801 a
1802 complete
1803 resizing
1804 when
1805 the
1806 load
1807 factor
1808 exceeds
1809 some
1810 threshold
1811 rmax
1812 Then
1813 a
1814 new
1815 larger
1816 table
1817 is
1818 allocated
1819 all
1820 the
1821 entries
1822 of
1823 the
1824 old
1825 table
1826 are
1827 removed
1828 and
1829 inserted
1830 into
1831 this
1832 new
1833 table
1834 and
1835 the
1836 old
1837 table
1838 is
1839 returned
1840 to
1841 the
1842 free
1843 storage
1844 pool
1845 Symmetrically
1846 when
1847 the
1848 load
1849 factor
1850 falls
1851 below
1852 a
1853 second
1854 threshold
1855 rmin
1856 all
1857 entries
1858 are
1859 moved
1860 to
1861 a
1862 new
1863 smaller
1864 table
1865 If
1866 the
1867 table
1868 size
1869 increases
1870 or
1871 decreases
1872 by
1873 a
1874 fixed
1875 percentage
1876 at
1877 each
1878 expansion
1879 the
1880 total
1881 cost
1882 of
1883 these
1884 resizings
1885 amortized
1886 over
1887 all
1888 insert
1889 and
1890 delete
1891 operations
1892 is
1893 still
1894 a
1895 constant
1896 independent
1897 of
1898 the
1899 number
1900 of
1901 entries
1902 n
1903 and
1904 of
1905 the
1906 number
1907 m
1908 of
1909 operations
1910 performed
1911 For
1912 example
1913 consider
1914 a
1915 table
1916 that
1917 was
1918 created
1919 with
1920 the
1921 minimum
1922 possible
1923 size
1924 and
1925 is
1926 doubled
1927 each
1928 time
1929 the
1930 load
1931 ratio
1932 exceeds
1933 some
1934 threshold
1935 If
1936 m
1937 elements
1938 are
1939 inserted
1940 into
1941 that
1942 table
1943 the
1944 total
1945 number
1946 of
1947 extra
1948 re
1949 insertions
1950 that
1951 occur
1952 in
1953 all
1954 dynamic
1955 resizings
1956 of
1957 the
1958 table
1959 is
1960 at
1961 most
1962 m
1963 1
1964 In
1965 other
1966 words
1967 dynamic
1968 resizing
1969 roughly
1970 doubles
1971 the
1972 cost
1973 of
1974 each
1975 insert
1976 or
1977 delete
1978 operation
1979 Incremental
1980 resizing
1981 Some
1982 hash
1983 table
1984 implementations
1985 notably
1986 in
1987 real
1988 time
1989 systems
1990 cannot
1991 pay
1992 the
1993 price
1994 of
1995 enlarging
1996 the
1997 hash
1998 table
1999 all
